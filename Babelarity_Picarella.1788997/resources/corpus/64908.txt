Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It is a universal model of computation that can be used to simulate any single-taped Turing machine and was first introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics.
Lambda calculus is Turing complete, that is, it is a universal model of computation that can be used to simulate any single-taped Turing machine. Its namesake, the Greek letter lambda (λ), is used in lambda expressions and lambda terms to denote binding a variable in a function.
Lambda calculus may be typed and untyped. In typed lambda calculus functions can be applied only if they are capable of accepting the given input's "type" of data.
Lambda calculus has applications in many different areas in mathematics, philosophy, linguistics, and computer science. Lambda calculus has played an important role in the development of the theory of programming languages. Functional programming languages implement the lambda calculus. Lambda calculus also is a current research topic in Category theory.
The lambda calculus was introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics. The original system was shown to be logically inconsistent in 1935 when Stephen Kleene and J. B. Rosser developed the Kleene–Rosser paradox.
Subsequently, in 1936 Church isolated and published just the portion relevant to computation, what is now called the untyped lambda calculus. In 1940, he also introduced a computationally weaker, but logically consistent system, known as the simply typed lambda calculus.
Until the 1960s when its relation to programming languages was clarified, the λ-calculus was only a formalism. Thanks to Montague and other linguists' applications in the semantics of natural language, the λ-calculus has begun to enjoy a respectable place in linguistics (see Heim and Kratzer 1998) and computer science, too.
Computable functions are a fundamental concept within computer science and mathematics. The λ-calculus provides a simple semantics for computation, enabling properties of computation to be studied formally. The λ-calculus incorporates two simplifications that make this semantics simple. The first simplification is that the λ-calculus treats functions "anonymously", without giving them explicit names. For example, the function
          s
          q
          u
          a
          r
          e
          _
          s
          u
          m
        ⁡
        (
        x
        ,
        y
        )
        =
          x
            2
        +
          y
            2
    {\displaystyle \operatorname {square\_sum} (x,y)=x^{2}+y^{2}}
can be rewritten in anonymous form as
        (
        x
        ,
        y
        )
        ↦
          x
            2
        +
          y
            2
    {\displaystyle (x,y)\mapsto x^{2}+y^{2}}
(read as "the pair of x and y is mapped to 
          x
            2
        +
          y
            2
    {\textstyle x^{2}+y^{2}}
  "). Similarly,
        id
        ⁡
        (
        x
        )
        =
        x
    {\displaystyle \operatorname {id} (x)=x}
can be rewritten in anonymous form as 
        x
        ↦
        x
    {\textstyle x\mapsto x}
  , where the input is simply mapped to itself.
The second simplification is that the λ-calculus only uses functions of a single input. An ordinary function that requires two inputs, for instance the 
          s
          q
          u
          a
          r
          e
          _
          s
          u
          m
    {\textstyle \operatorname {square\_sum} }
   function, can be reworked into an equivalent function that accepts a single input, and as output returns another function, that in turn accepts a single input. For example,
        (
        x
        ,
        y
        )
        ↦
          x
            2
        +
          y
            2
    {\displaystyle (x,y)\mapsto x^{2}+y^{2}}
can be reworked into
        x
        ↦
        (
        y
        ↦
          x
            2
        +
          y
            2
        )
    {\displaystyle x\mapsto (y\mapsto x^{2}+y^{2})}
This method, known as currying, transforms a function that takes multiple arguments into a chain of functions each with a single argument.
Function application of the 
          s
          q
          u
          a
          r
          e
          _
          s
          u
          m
    {\textstyle \operatorname {square\_sum} }
   function to the arguments (5, 2), yields at once
        (
        (
        x
        ,
        y
        )
        ↦
          x
            2
        +
          y
            2
        )
        (
        5
        ,
        2
        )
    {\textstyle ((x,y)\mapsto x^{2}+y^{2})(5,2)}
        =
          5
            2
        +
          2
            2
    {\textstyle =5^{2}+2^{2}}
        =
        29
    {\textstyle =29}
  ,
whereas evaluation of the curried version requires one more step
        (
        (
        x
        ↦
        (
        y
        ↦
          x
            2
        +
          y
            2
        )
        )
        (
        5
        )
        )
        (
        2
        )
    {\textstyle ((x\mapsto (y\mapsto x^{2}+y^{2}))(5))(2)}
        =
        (
        y
        ↦
          5
            2
        +
          y
            2
        )
        (
        2
        )
    {\textstyle =(y\mapsto 5^{2}+y^{2})(2)}
        =
          5
            2
        +
          2
            2
    {\textstyle =5^{2}+2^{2}}
        =
        29
    {\textstyle =29}
to arrive at the same result.
The lambda calculus consists of a language of lambda terms, which is defined by a certain formal syntax, and a set of transformation rules, which allow manipulation of the lambda terms. These transformation rules can be viewed as an equational theory or as an operational definition.
As described above, all functions in the lambda calculus are anonymous functions, having no names. They only accept one input variable, with currying used to implement functions with several variables.
The syntax of the lambda calculus defines some expressions as valid lambda calculus expressions and some as invalid, just as some strings of characters are valid C programs and some are not. A valid lambda calculus expression is called a "lambda term".
The following three rules give an inductive definition that can be applied to build all syntactically valid lambda terms:
a variable, 
        x
    {\displaystyle x}
  , is itself a valid lambda term
if 
        t
    {\displaystyle t}
   is a lambda term, and 
        x
    {\displaystyle x}
   is a variable, then 
        (
        λ
        x
        .
        t
        )
    {\displaystyle (\lambda x.t)}
   is a lambda term (called a lambda abstraction);
if 
        t
    {\displaystyle t}
   and 
        s
    {\displaystyle s}
   are lambda terms, then 
        (
        t
        s
        )
    {\displaystyle (ts)}
   is a lambda term (called an application).
Nothing else is a lambda term. Thus a lambda term is valid if and only if it can be obtained by repeated application of these three rules. However, some parentheses can be omitted according to certain rules. For example, the outermost parentheses are usually not written. See Notation, below.
A lambda abstraction 
        λ
        x
        .
        t
    {\displaystyle \lambda x.t}
   is a definition of an anonymous function that is capable of taking a single input 
        x
    {\displaystyle x}
   and substituting it into the expression 
        t
    {\displaystyle t}
  . It thus defines an anonymous function that takes 
        x
    {\displaystyle x}
   and returns 
        t
    {\displaystyle t}
  . For example, 
        λ
        x
        .
          x
            2
        +
        2
    {\displaystyle \lambda x.x^{2}+2}
   is a lambda abstraction for the function 
        f
        (
        x
        )
        =
          x
            2
        +
        2
    {\displaystyle f(x)=x^{2}+2}
   using the term 
          x
            2
        +
        2
    {\displaystyle x^{2}+2}
   for 
        t
    {\displaystyle t}
  . The definition of a function with a lambda abstraction merely "sets up" the function but does not invoke it. The abstraction binds the variable 
        x
    {\displaystyle x}
   in the term 
        t
    {\displaystyle t}
  .
An application 
        t
        s
    {\displaystyle ts}
   represents the application of a function 
        t
    {\displaystyle t}
   to an input 
        s
    {\displaystyle s}
  , that is, it represents the act of calling function 
        t
    {\displaystyle t}
   on input 
        s
    {\displaystyle s}
   to produce 
        t
        (
        s
        )
    {\displaystyle t(s)}
  .
There is no concept in lambda calculus of variable declaration. In a definition such as 
        λ
        x
        .
        x
        +
        y
    {\displaystyle \lambda x.x+y}
   (i.e. 
        f
        (
        x
        )
        =
        x
        +
        y
    {\displaystyle f(x)=x+y}
  ), the lambda calculus treats 
        y
    {\displaystyle y}
   as a variable that is not yet defined. The lambda abstraction 
        λ
        x
        .
        x
        +
        y
    {\displaystyle \lambda x.x+y}
   is syntactically valid, and represents a function that adds its input to the yet-unknown 
        y
    {\displaystyle y}
  .
Bracketing may be used and may be needed to disambiguate terms. For example, 
        λ
        x
        .
        (
        (
        λ
        x
        .
        x
        )
        x
        )
    {\displaystyle \lambda x.((\lambda x.x)x)}
   and 
        (
        λ
        x
        .
        (
        λ
        x
        .
        x
        )
        )
        x
    {\displaystyle (\lambda x.(\lambda x.x))x}
   denote different terms (although they coincidentally reduce to the same value). Here the first example defines a function that defines a function and returns the result of applying x to the child-function (apply function then return), while the second example defines a function that returns a function for any input and then returns it on application of x (return function then apply).
In lambda calculus, functions are taken to be 'first class values', so functions may be used as the inputs, or be returned as outputs from other functions.
For example, 
        λ
        x
        .
        x
    {\displaystyle \lambda x.x}
   represents the identity function, 
        x
        ↦
        x
    {\displaystyle x\mapsto x}
  , and 
        (
        λ
        x
        .
        x
        )
        y
    {\displaystyle (\lambda x.x)y}
   represents the identity function applied to 
        y
    {\displaystyle y}
  . Further, 
        (
        λ
        x
        .
        y
        )
    {\displaystyle (\lambda x.y)}
   represents the constant function 
        x
        ↦
        y
    {\displaystyle x\mapsto y}
  , the function that always returns 
        y
    {\displaystyle y}
  , no matter the input. In lambda calculus, function application is regarded as left-associative, so that 
        s
        t
        x
    {\displaystyle stx}
   means 
        (
        s
        t
        )
        x
    {\displaystyle (st)x}
  .
There are several notions of "equivalence" and "reduction" that allow lambda terms to be "reduced" to "equivalent" lambda terms.
A basic form of equivalence, definable on lambda terms, is alpha equivalence. It captures the intuition that the particular choice of a bound variable, in a lambda abstraction, does not (usually) matter. For instance, 
        λ
        x
        .
        x
    {\displaystyle \lambda x.x}
   and 
        λ
        y
        .
        y
    {\displaystyle \lambda y.y}
   are alpha-equivalent lambda terms, and they both represent the same function (the identity function). The terms 
        x
    {\displaystyle x}
   and 
        y
    {\displaystyle y}
   are not alpha-equivalent, because they are not bound in a lambda abstraction. In many presentations, it is usual to identify alpha-equivalent lambda terms.
The following definitions are necessary in order to be able to define beta reduction:
The free variables of a term are those variables not bound by a lambda abstraction. The set of free variables of an expression is defined inductively:
The free variables of 
        x
    {\displaystyle x}
   are just 
        x
    {\displaystyle x}
The set of free variables of 
        λ
        x
        .
        t
    {\displaystyle \lambda x.t}
   is the set of free variables of 
        t
    {\displaystyle t}
  , but with 
        x
    {\displaystyle x}
   removed
The set of free variables of 
        t
        s
    {\displaystyle ts}
   is the union of the set of free variables of 
        t
    {\displaystyle t}
   and the set of free variables of 
        s
    {\displaystyle s}
  .
For example, the lambda term representing the identity 
        λ
        x
        .
        x
    {\displaystyle \lambda x.x}
   has no free variables, but the function 
        λ
        x
        .
        y
        x
    {\displaystyle \lambda x.yx}
   has a single free variable, 
        y
    {\displaystyle y}
  .
Suppose 
        t
    {\displaystyle t}
  , 
        s
    {\displaystyle s}
   and 
        r
    {\displaystyle r}
   are lambda terms and 
        x
    {\displaystyle x}
   and 
        y
    {\displaystyle y}
   are variables. The notation 
        t
        [
        x
        :=
        r
        ]
    {\displaystyle t[x:=r]}
   indicates substitution of 
        r
    {\displaystyle r}
   for 
        x
    {\displaystyle x}
   in 
        t
    {\displaystyle t}
   in a capture-avoiding manner. This is defined so that:
        x
        [
        x
        :=
        r
        ]
        =
        r
    {\displaystyle x[x:=r]=r}
  ;
        y
        [
        x
        :=
        r
        ]
        =
        y
    {\displaystyle y[x:=r]=y}
   if 
        x
        ≠
        y
    {\displaystyle x\neq y}
  ;
        (
        t
        s
        )
        [
        x
        :=
        r
        ]
        =
        (
        t
        [
        x
        :=
        r
        ]
        )
        (
        s
        [
        x
        :=
        r
        ]
        )
    {\displaystyle (ts)[x:=r]=(t[x:=r])(s[x:=r])}
  ;
        (
        λ
        x
        .
        t
        )
        [
        x
        :=
        r
        ]
        =
        λ
        x
        .
        t
    {\displaystyle (\lambda x.t)[x:=r]=\lambda x.t}
  ;
        (
        λ
        y
        .
        t
        )
        [
        x
        :=
        r
        ]
        =
        λ
        y
        .
        (
        t
        [
        x
        :=
        r
        ]
        )
    {\displaystyle (\lambda y.t)[x:=r]=\lambda y.(t[x:=r])}
   if 
        x
        ≠
        y
    {\displaystyle x\neq y}
   and 
        y
    {\displaystyle y}
   is not in the free variables of 
        r
    {\displaystyle r}
  . The variable 
        y
    {\displaystyle y}
   is said to be "fresh" for 
        r
    {\displaystyle r}
  .
For example, 
        (
        λ
        x
        .
        x
        )
        [
        y
        :=
        y
        ]
        =
        λ
        x
        .
        (
        x
        [
        y
        :=
        y
        ]
        )
        =
        λ
        x
        .
        x
    {\displaystyle (\lambda x.x)[y:=y]=\lambda x.(x[y:=y])=\lambda x.x}
  , and 
        (
        (
        λ
        x
        .
        y
        )
        x
        )
        [
        x
        :=
        y
        ]
        =
        (
        (
        λ
        x
        .
        y
        )
        [
        x
        :=
        y
        ]
        )
        (
        x
        [
        x
        :=
        y
        ]
        )
        =
        (
        λ
        x
        .
        y
        )
        y
    {\displaystyle ((\lambda x.y)x)[x:=y]=((\lambda x.y)[x:=y])(x[x:=y])=(\lambda x.y)y}
  .
The freshness condition (requiring that 
        y
    {\displaystyle y}
   is not in the free variables of 
        r
    {\displaystyle r}
  ) is crucial in order to ensure that substitution does not change the meaning of functions. For example, a substitution is made that ignores the freshness condition: 
        (
        λ
        x
        .
        y
        )
        [
        y
        :=
        x
        ]
        =
        λ
        x
        .
        (
        y
        [
        y
        :=
        x
        ]
        )
        =
        λ
        x
        .
        x
    {\displaystyle (\lambda x.y)[y:=x]=\lambda x.(y[y:=x])=\lambda x.x}
  . This substitution turns the constant function 
        λ
        x
        .
        y
    {\displaystyle \lambda x.y}
   into the identity 
        λ
        x
        .
        x
    {\displaystyle \lambda x.x}
   by substitution.
In general, failure to meet the freshness condition can be remedied by alpha-renaming with a suitable fresh variable. For example, switching back to our correct notion of substitution, in 
        (
        λ
        x
        .
        y
        )
        [
        y
        :=
        x
        ]
    {\displaystyle (\lambda x.y)[y:=x]}
   the lambda abstraction can be renamed with a fresh variable 
        z
    {\displaystyle z}
  , to obtain 
        (
        λ
        z
        .
        y
        )
        [
        y
        :=
        x
        ]
        =
        λ
        z
        .
        (
        y
        [
        y
        :=
        x
        ]
        )
        =
        λ
        z
        .
        x
    {\displaystyle (\lambda z.y)[y:=x]=\lambda z.(y[y:=x])=\lambda z.x}
  , and the meaning of the function is preserved by substitution.
The beta reduction rule states that an application of the form 
        (
        λ
        x
        .
        t
        )
        s
    {\displaystyle (\lambda x.t)s}
   reduces to the term 
        t
        [
        x
        :=
        s
        ]
    {\displaystyle t[x:=s]}
  . The notation 
        (
        λ
        x
        .
        t
        )
        s
        →
        t
        [
        x
        :=
        s
        ]
    {\displaystyle (\lambda x.t)s\to t[x:=s]}
   is used to indicate that 
        (
        λ
        x
        .
        t
        )
        s
    {\displaystyle (\lambda x.t)s}
   beta reduces to 
        t
        [
        x
        :=
        s
        ]
    {\displaystyle t[x:=s]}
  . For example, for every 
        s
    {\displaystyle s}
  , 
        (
        λ
        x
        .
        x
        )
        s
        →
        x
        [
        x
        :=
        s
        ]
        =
        s
    {\displaystyle (\lambda x.x)s\to x[x:=s]=s}
  . This demonstrates that 
        λ
        x
        .
        x
    {\displaystyle \lambda x.x}
   really is the identity. Similarly, 
        (
        λ
        x
        .
        y
        )
        s
        →
        y
        [
        x
        :=
        s
        ]
        =
        y
    {\displaystyle (\lambda x.y)s\to y[x:=s]=y}
  , which demonstrates that 
        λ
        x
        .
        y
    {\displaystyle \lambda x.y}
   is a constant function.
The lambda calculus may be seen as an idealised functional programming language, like Haskell or Standard ML. Under this view, beta reduction corresponds to a computational step. This step can be repeated by additional beta conversions until there are no more applications left to reduce. In the untyped lambda calculus, as presented here, this reduction process may not terminate. For instance, consider the term 
        Ω
        =
        (
        λ
        x
        .
        x
        x
        )
        (
        λ
        x
        .
        x
        x
        )
    {\displaystyle \Omega =(\lambda x.xx)(\lambda x.xx)}
  . Here 
        (
        λ
        x
        .
        x
        x
        )
        (
        λ
        x
        .
        x
        x
        )
        →
        (
        x
        x
        )
        [
        x
        :=
        λ
        x
        .
        x
        x
        ]
        =
        (
        x
        [
        x
        :=
        λ
        x
        .
        x
        x
        ]
        )
        (
        x
        [
        x
        :=
        λ
        x
        .
        x
        x
        ]
        )
        =
        (
        λ
        x
        .
        x
        x
        )
        (
        λ
        x
        .
        x
        x
        )
    {\displaystyle (\lambda x.xx)(\lambda x.xx)\to (xx)[x:=\lambda x.xx]=(x[x:=\lambda x.xx])(x[x:=\lambda x.xx])=(\lambda x.xx)(\lambda x.xx)}
  . That is, the term reduces to itself in a single beta reduction, and therefore the reduction process will never terminate.
Another aspect of the untyped lambda calculus is that it does not distinguish between different kinds of data. For instance, it may be desirable to write a function that only operates on numbers. However, in the untyped lambda calculus, there is no way to prevent a function from being applied to truth values, strings, or other non-number objects.
Lambda expressions are composed of:
variables v1, v2, ..., vn, ...
the abstraction symbols lambda 'λ' and dot '.'
parentheses ( )
The set of lambda expressions, Λ, can be defined inductively:
If x is a variable, then x ∈ Λ
If x is a variable and M ∈ Λ, then (λx.M) ∈ Λ
If M, N ∈ Λ, then (M N) ∈ Λ
Instances of rule 2 are known as abstractions and instances of rule 3 are known as applications.
To keep the notation of lambda expressions uncluttered, the following conventions are usually applied:
Outermost parentheses are dropped: M N instead of (M N)
Applications are assumed to be left associative: M N P may be written instead of ((M N) P)
The body of an abstraction extends as far right as possible: λx.M N means λx.(M N) and not (λx.M) N
A sequence of abstractions is contracted: λx.λy.λz.N is abbreviated as λxyz.N
The abstraction operator, λ, is said to bind its variable wherever it occurs in the body of the abstraction. Variables that fall within the scope of an abstraction are said to be bound. All other variables are called free. For example, in the following expression y is a bound variable and x is free: λy.x x y. Also note that a variable is bound by its "nearest" abstraction. In the following example the single occurrence of x in the expression is bound by the second lambda: λx.y (λx.z x)
The set of free variables of a lambda expression, M, is denoted as FV(M) and is defined by recursion on the structure of the terms, as follows:
FV(x) = {x}, where x is a variable
FV(λx.M) = FV(M) \ {x}
FV(M N) = FV(M) ∪ FV(N)
An expression that contains no free variables is said to be closed. Closed lambda expressions are also known as combinators and are equivalent to terms in combinatory logic.
The meaning of lambda expressions is defined by how expressions can be reduced.
There are three kinds of reduction:
α-conversion: changing bound variables (alpha);
β-reduction: applying functions to their arguments (beta);
η-conversion: which captures a notion of extensionality (eta).
We also speak of the resulting equivalences: two expressions are β-equivalent, if they can be β-converted into the same expression, and α/η-equivalence are defined similarly.
The term redex, short for reducible expression, refers to subterms that can be reduced by one of the reduction rules. For example, (λx.M) N is a beta-redex in expressing the substitution of N for x in M; if x is not free in M, λx.M x is also an eta-redex. The expression to which a redex reduces is called its reduct; using the previous example, the reducts of these expressions are respectively M[x:=N] and M.
Alpha-conversion, sometimes known as alpha-renaming, allows bound variable names to be changed. For example, alpha-conversion of λx.x might yield λy.y. Terms that differ only by alpha-conversion are called α-equivalent. Frequently, in uses of lambda calculus, α-equivalent terms are considered to be equivalent.
The precise rules for alpha-conversion are not completely trivial. First, when alpha-converting an abstraction, the only variable occurrences that are renamed are those that are bound to the same abstraction. For example, an alpha-conversion of λx.λx.x could result in λy.λx.x, but it could not result in λy.λx.y. The latter has a different meaning from the original.
Second, alpha-conversion is not possible if it would result in a variable getting captured by a different abstraction. For example, if we replace x with y in λx.λy.x, we get λy.λy.y, which is not at all the same.
In programming languages with static scope, alpha-conversion can be used to make name resolution simpler by ensuring that no variable name masks a name in a containing scope (see alpha renaming to make name resolution trivial).
In the De Bruijn index notation, any two alpha-equivalent terms are literally identical.
Substitution, written E[V := R], is the process of replacing all free occurrences of the variable V in the expression E with expression R. Substitution on terms of the λ-calculus is defined by recursion on the structure of terms, as follows (note: x and y are only variables while M and N are any λ expression).
x[x := N]       ≡ N
y[x := N]       ≡ y, if x ≠ y
(M1 M2)[x := N] ≡ (M1[x := N]) (M2[x := N])
(λx.M)[x := N]  ≡ λx.M
(λy.M)[x := N]  ≡ λy.(M[x := N]), if x ≠ y, provided y ∉ FV(N)
To substitute into a lambda abstraction, it is sometimes necessary to α-convert the expression. For example, it is not correct for (λx.y)[y := x] to result in (λx.x), because the substituted x was supposed to be free but ended up being bound. The correct substitution in this case is (λz.x), up to α-equivalence. Notice that substitution is defined uniquely up to α-equivalence.
Beta-reduction captures the idea of function application. Beta-reduction is defined in terms of substitution: the beta-reduction of  ((λV.E) E′)  is E[V := E′].
For example, assuming some encoding of 2, 7, ×, we have the following β-reduction: ((λn.n×2) 7) → 7×2.
Eta-conversion expresses the idea of extensionality, which in this context is that two functions are the same if and only if they give the same result for all arguments. Eta-conversion converts between λx.(f x) and f whenever x does not appear free in f.
For the untyped lambda calculus, β-reduction as a rewriting rule is neither strongly normalising nor weakly normalising.
However, it can be shown that β-reduction is confluent. (Of course, we are working up to α-conversion, i.e. we consider two normal forms to be equal, if it is possible to α-convert one into the other.)
Therefore, both strongly normalising terms and weakly normalising terms have a unique normal form. For strongly normalising terms, any reduction strategy is guaranteed to yield the normal form, whereas for weakly normalising terms, some reduction strategies may fail to find it.
The basic lambda calculus may be used to model booleans, arithmetic, data structures and recursion, as illustrated in the following sub-sections.
There are several possible ways to define the natural numbers in lambda calculus, but by far the most common are the Church numerals, which can be defined as follows:
0 := λf.λx.x
1 := λf.λx.f x
2 := λf.λx.f (f x)
3 := λf.λx.f (f (f x))
and so on. Or using the alternative syntax presented above in Notation:
0 := λfx.x
1 := λfx.f x
2 := λfx.f (f x)
3 := λfx.f (f (f x))
A Church numeral is a higher-order function—it takes a single-argument function f, and returns another single-argument function. The Church numeral n is a function that takes a function f as argument and returns the n-th composition of f, i.e. the function f composed with itself n times. This is denoted f(n) and is in fact the n-th power of f (considered as an operator); f(0) is defined to be the identity function. Such repeated compositions (of a single function f) obey the laws of exponents, which is why these numerals can be used for arithmetic. (In Church's original lambda calculus, the formal parameter of a lambda expression was required to occur at least once in the function body, which made the above definition of 0 impossible.)
We can define a successor function, which takes a number n and returns n + 1 by adding another application of f,where '(mf)x' means the function 'f' is applied 'm' times on 'x':
SUCC := λn.λf.λx.f (n f x)
Because the m-th composition of f composed with the n-th composition of f gives the m+n-th composition of f, addition can be defined as follows:
PLUS := λm.λn.λf.λx.m f (n f x)
PLUS can be thought of as a function taking two natural numbers as arguments and returning a natural number; it can be verified that
PLUS 2 3
and
5
are β-equivalent lambda expressions. Since adding m to a number n can be accomplished by adding 1 m times, an equivalent definition is:
PLUS := λm.λn.m SUCC n 
Similarly, multiplication can be defined as
MULT := λm.λn.λf.m (n f)
Alternatively
MULT := λm.λn.m (PLUS n) 0
since multiplying m and n is the same as repeating the add n function m times and then applying it to zero. Exponentiation has a rather simple rendering in Church numerals, namely
POW := λb.λe.e b
The predecessor function defined by PRED n = n − 1 for a positive integer n and PRED 0 = 0 is considerably more difficult. The formula
PRED := λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)
can be validated by showing inductively that if T denotes (λg.λh.h (g f)), then T(n)(λu.x) = (λh.h(f(n−1)(x))) for n > 0. Two other definitions of PRED are given below, one using conditionals and the other using pairs. With the predecessor function, subtraction is straightforward. Defining
SUB := λm.λn.n PRED m,
SUB m n yields m − n when m > n and 0 otherwise.
By convention, the following two definitions (known as Church booleans) are used for the boolean values TRUE and FALSE:
TRUE := λx.λy.x
FALSE := λx.λy.y
(Note that FALSE is equivalent to the Church numeral zero defined above)
Then, with these two λ-terms, we can define some logic operators (these are just possible formulations; other expressions are equally correct):
AND := λp.λq.p q p
OR := λp.λq.p p q
NOT := λp.p FALSE TRUE
IFTHENELSE := λp.λa.λb.p a b
We are now able to compute some logic functions, for example:
AND TRUE FALSE
≡ (λp.λq.p q p) TRUE FALSE →β TRUE FALSE TRUE
≡ (λx.λy.x) FALSE TRUE →β FALSE
and we see that AND TRUE FALSE is equivalent to FALSE.
A predicate is a function that returns a boolean value. The most fundamental predicate is ISZERO, which returns TRUE if its argument is the Church numeral 0, and FALSE if its argument is any other Church numeral:
ISZERO := λn.n (λx.FALSE) TRUE
The following predicate tests whether the first argument is less-than-or-equal-to the second:
LEQ := λm.λn.ISZERO (SUB m n),
and since m = n, if LEQ m n and LEQ n m, it is straightforward to build a predicate for numerical equality.
The availability of predicates and the above definition of TRUE and FALSE make it convenient to write "if-then-else" expressions in lambda calculus. For example, the predecessor function can be defined as:
PRED := λn.n (λg.λk.ISZERO (g 1) k (PLUS (g k) 1)) (λv.0) 0
which can be verified by showing inductively that n (λg.λk.ISZERO (g 1) k (PLUS (g k) 1)) (λv.0) is the add n − 1 function for n > 0.
A pair (2-tuple) can be defined in terms of TRUE and FALSE, by using the Church encoding for pairs. For example, PAIR encapsulates the pair (x,y), FIRST returns the first element of the pair, and SECOND returns the second.
PAIR := λx.λy.λf.f x y
FIRST := λp.p TRUE
SECOND := λp.p FALSE
NIL := λx.TRUE
NULL := λp.p (λx.λy.FALSE)
A linked list can be defined as either NIL for the empty list, or the PAIR of an element and a smaller list. The predicate NULL tests for the value NIL. (Alternatively, with NIL := FALSE, the construct l (λh.λt.λz.deal_with_head_h_and_tail_t) (deal_with_nil) obviates the need for an explicit NULL test).
As an example of the use of pairs, the shift-and-increment function that maps (m, n) to (n, n + 1) can be defined as
Φ := λx.PAIR (SECOND x) (SUCC (SECOND x))
which allows us to give perhaps the most transparent version of the predecessor function:
PRED := λn.FIRST (n Φ (PAIR 0 0)).
Recursion is the definition of a function using the function itself. Lambda calculus cannot express this as directly as some other notations: all functions are anonymous in lambda calculus, so we can't refer to a value which is yet to be defined, inside the lambda term defining that same value.. However, recursion can still be achieved by arranging for a lambda expression to receive itself as its argument value, for example in  (λx.x x) E.
Consider the factorial function F(n) recursively defined by
F(n) = 1, if n = 0; else n × F(n − 1).
In the lambda expression which is to represent this function, a parameter (typically the first one) will be assumed to receive the lambda expression itself as its value, so that calling it – applying it to an argument – will amount to recursion. Thus to achieve recursion, the intended-as-self-referencing argument (called r here) must always be passed to itself within the function body, at a call point:
G := λr. λn.(1, if n = 0; else n × (r r (n−1)))
with  r r x = F x = G r x  to hold, so  r = G  and
F := G G = (λx.x x) G
The self-application achieves replication here, passing the function's lambda expression on to the next invocation as an argument value, making it available to be referenced and called there.
This solves it but requires re-writing each recursive call as self-application. We would like to have a generic solution, without a need for any re-writes:
G := λr. λn.(1, if n = 0; else n × (r (n−1)))
with  r x = F x = G r x  to hold, so  r = G r =: FIX G  and
F := FIX G  where  FIX g := (r where r = g r) = g (FIX g)
so that  FIX G = G (FIX G) = (λn.(1, if n = 0; else n × ((FIX G) (n−1))))
Given a lambda term with first argument representing recursive call (e.g. G here), the fixed-point combinator FIX will return a self-replicating lambda expression representing the recursive function (here, F). The function does not need to be explicitly passed to itself at any point, for the self-replication is arranged in advance, when it is created, to be done each time it is called. Thus the original lambda expression (FIX G) is re-created inside itself, at call-point, achieving self-reference.
In fact, there are many possible definitions for this FIX operator, the simplest of them being:
Y := λg.(λx.g (x x)) (λx.g (x x))
In the lambda calculus, Y g  is a fixed-point of g, as it expands to:
Y g
(λh.(λx.h (x x)) (λx.h (x x))) g
(λx.g (x x)) (λx.g (x x))
g ((λx.g (x x)) (λx.g (x x)))
g (Y g)
Now, to perform our recursive call to the factorial function, we would simply call (Y G) n,  where n is the number we are calculating the factorial of. Given n = 4, for example, this gives:
(Y G) 4
G (Y G) 4
(λr.λn.(1, if n = 0; else n × (r (n−1)))) (Y G) 4
(λn.(1, if n = 0; else n × ((Y G) (n−1)))) 4
1, if 4 = 0; else 4 × ((Y G) (4−1))
4 × (G (Y G) (4−1))
4 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (4−1))
4 × (1, if 3 = 0; else 3 × ((Y G) (3−1)))
4 × (3 × (G (Y G) (3−1)))
4 × (3 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (3−1)))
4 × (3 × (1, if 2 = 0; else 2 × ((Y G) (2−1))))
4 × (3 × (2 × (G (Y G) (2−1))))
4 × (3 × (2 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (2−1))))
4 × (3 × (2 × (1, if 1 = 0; else 1 × ((Y G) (1−1)))))
4 × (3 × (2 × (1 × (G (Y G) (1−1)))))
4 × (3 × (2 × (1 × ((λn.(1, if n = 0; else n × ((Y G) (n−1)))) (1−1)))))
4 × (3 × (2 × (1 × (1, if 0 = 0; else 0 × ((Y G) (0−1))))))
4 × (3 × (2 × (1 × (1))))
24
Every recursively defined function can be seen as a fixed point of some suitably defined function closing over the recursive call with an extra argument, and therefore, using Y, every recursively defined function can be expressed as a lambda expression. In particular, we can now cleanly define the subtraction, multiplication and comparison predicate of natural numbers recursively.
Certain terms have commonly accepted names:
 I := λx.x
 K := λx.λy.x
 S := λx.λy.λz.x z (y z)
 B := λx.λy.λz.x (y z)
 C := λx.λy.λz.x z y
 W := λx.λy.x y y
 U := λx.λy.y (x x y)
 ω := λx.x x
 Ω := ω ω
 Y := λg.(λx.g (x x)) (λx.g (x x))
A typed lambda calculus is a typed formalism that uses the lambda-symbol (
        λ
    {\displaystyle \lambda }
  ) to denote anonymous function abstraction. In this context, types are usually objects of a syntactic nature that are assigned to lambda terms; the exact nature of a type depends on the calculus considered (see kinds below). From a certain point of view, typed lambda calculi can be seen as refinements of the untyped lambda calculus but from another point of view, they can also be considered the more fundamental theory and untyped lambda calculus a special case with only one type.
Typed lambda calculi are foundational programming languages and are the base of typed functional programming languages such as ML and Haskell and, more indirectly, typed imperative programming languages. Typed lambda calculi play an important role in the design of type systems for programming languages; here typability usually captures desirable properties of the program, e.g. the program will not cause a memory access violation.
Typed lambda calculi are closely related to mathematical logic and proof theory via the Curry–Howard isomorphism and they can be considered as the internal language of classes of categories, e.g. the simply typed lambda calculus is the language of Cartesian closed categories (CCCs).
A function F: N → N of natural numbers is a computable function if and only if there exists a lambda expression f such that for every pair of x, y in N, F(x)=y if and only if f x =β y,  where x and y are the Church numerals corresponding to x and y, respectively and =β meaning equivalence with beta reduction. This is one of the many ways to define computability; see the Church-Turing thesis for a discussion of other approaches and their equivalence.
There is no algorithm that takes as input two lambda expressions and outputs TRUE or FALSE depending on whether or not the two expressions are equivalent. This was historically the first problem for which undecidability could be proven. As is common for a proof of undecidability, the proof shows that no computable function can decide the equivalence. Church's thesis is then invoked to show that no algorithm can do so.
Church's proof first reduces the problem to determining whether a given lambda expression has a normal form. A normal form is an equivalent expression that cannot be reduced any further under the rules imposed by the form. Then he assumes that this predicate is computable, and can hence be expressed in lambda calculus. Building on earlier work by Kleene and constructing a Gödel numbering for lambda expressions, he constructs a lambda expression e that closely follows the proof of Gödel's first incompleteness theorem. If e is applied to its own Gödel number, a contradiction results.
As pointed out by Peter Landin's 1965 paper A Correspondence between ALGOL 60 and Church's Lambda-notation, sequential procedural programming languages can be understood in terms of the lambda calculus, which provides the basic mechanisms for procedural abstraction and procedure (subprogram) application.
Lambda calculus reifies "functions" and makes them first-class objects, which raises implementation complexity when it is implemented.
For example, in Lisp the 'square' function can be expressed as a lambda expression as follows:
The above example is an expression that evaluates to a first-class function. The symbol lambda creates an anonymous function, given a list of parameter names, (x) — just a single argument in this case, and an expression that is evaluated as the body of the function, (* x x). The Haskell example is identical. Anonymous functions are sometimes called lambda expressions.
For example, Pascal and many other imperative languages have long supported passing subprograms as arguments to other subprograms through the mechanism of function pointers. However, function pointers are not a sufficient condition for functions to be first class datatypes, because a function is a first class datatype if and only if new instances of the function can be created at run-time. And this run-time creation of functions is supported in Smalltalk, Javascript, and more recently in Scala, Eiffel ("agents"), C# ("delegates") and C++11, among others.
Whether a term is normalising or not, and how much work needs to be done in normalising it if it is, depends to a large extent on the reduction strategy used. The distinction between reduction strategies relates to the distinction in functional programming languages between eager evaluation and lazy evaluation.
Full beta reductions
Any redex can be reduced at any time. This means essentially the lack of any particular reduction strategy—with regard to reducibility, "all bets are off".
Applicative order
The rightmost, innermost redex is always reduced first. Intuitively this means a function's arguments are always reduced before the function itself. Applicative order always attempts to apply functions to normal forms, even when this is not possible.
Most programming languages (including Lisp, ML and imperative languages like C and Java) are described as "strict", meaning that functions applied to non-normalising arguments are non-normalising. This is done essentially using applicative order, call by value reduction (see below), but usually called "eager evaluation".
Normal order
The leftmost, outermost redex is always reduced first. That is, whenever possible the arguments are substituted into the body of an abstraction before the arguments are reduced.
Call by name
As normal order, but no reductions are performed inside abstractions. For example, λx.(λx.x)x is in normal form according to this strategy, although it contains the redex (λx.x)x.
Call by value
Only the outermost redexes are reduced: a redex is reduced only when its right hand side has reduced to a value (variable or lambda abstraction).
Call by need
As normal order, but function applications that would duplicate terms instead name the argument, which is then reduced only "when it is needed". Called in practical contexts "lazy evaluation". In implementations this "name" takes the form of a pointer, with the redex represented by a thunk.
Applicative order is not a normalising strategy. The usual counterexample is as follows: define Ω = ωω where ω = λx.xx. This entire expression contains only one redex, namely the whole expression; its reduct is again Ω. Since this is the only available reduction, Ω has no normal form (under any evaluation strategy). Using applicative order, the expression KIΩ = (λx.λy.x) (λx.x)Ω is reduced by first reducing Ω to normal form (since it is the rightmost redex), but since Ω has no normal form, applicative order fails to find a normal form for KIΩ.
In contrast, normal order is so called because it always finds a normalising reduction, if one exists. In the above example, KIΩ reduces under normal order to I, a normal form. A drawback is that redexes in the arguments may be copied, resulting in duplicated computation (for example, (λx.xx) ((λx.x)y) reduces to ((λx.x)y) ((λx.x)y) using this strategy; now there are two redexes, so full evaluation needs two more steps, but if the argument had been reduced first, there would now be none).
The positive tradeoff of using applicative order is that it does not cause unnecessary computation, if all arguments are used, because it never substitutes arguments containing redexes and hence never needs to copy them (which would duplicate work). In the above example, in applicative order (λx.xx) ((λx.x)y) reduces first to (λx.xx)y and then to the normal order yy, taking two steps instead of three.
Most purely functional programming languages (notably Miranda and its descendents, including Haskell), and the proof languages of theorem provers, use lazy evaluation, which is essentially the same as call by need. This is like normal order reduction, but call by need manages to avoid the duplication of work inherent in normal order reduction using sharing. In the example given above, (λx.xx) ((λx.x)y) reduces to ((λx.x)y) ((λx.x)y), which has two redexes, but in call by need they are represented using the same object rather than copied, so when one is reduced the other is too.
While the idea of beta reduction seems simple enough, it is not an atomic step, in that it must have a non-trivial cost when estimating computational complexity. To be precise, one must somehow find the location of all of the occurrences of the bound variable V in the expression E, implying a time cost, or one must keep track of these locations in some way, implying a space cost. A naïve search for the locations of V in E is O(n) in the length n of E. This has led to the study of systems that use explicit substitution. Sinot's director strings offer a way of tracking the locations of free variables in expressions.
The Church–Rosser property of the lambda calculus means that evaluation (β-reduction) can be carried out in any order, even in parallel. This means that various nondeterministic evaluation strategies are relevant. However, the lambda calculus does not offer any explicit constructs for parallelism. One can add constructs such as Futures to the lambda calculus. Other process calculi have been developed for describing communication and concurrency.
The fact that lambda calculus terms act as functions on other lambda calculus terms, and even on themselves, led to questions about the semantics of the lambda calculus. Could a sensible meaning be assigned to lambda calculus terms? The natural semantics was to find a set D isomorphic to the function space D → D, of functions on itself. However, no nontrivial such D can exist, by cardinality constraints because the set of all functions from D to D has greater cardinality than D, unless D is a singleton set.
In the 1970s, Dana Scott showed that, if only continuous functions were considered, a set or domain D with the required property could be found, thus providing a model for the lambda calculus.
This work also formed the basis for the denotational semantics of programming languages.
Abelson, Harold & Gerald Jay Sussman. Structure and Interpretation of Computer Programs. The MIT Press. ISBN 0-262-51087-1.
Hendrik Pieter Barendregt Introduction to Lambda Calculus.
Henk Barendregt, The Impact of the Lambda Calculus in Logic and Computer Science. The Bulletin of Symbolic Logic, Volume 3, Number 2, June 1997.
Barendregt, Hendrik Pieter, The Type Free Lambda Calculus pp1091–1132 of Handbook of Mathematical Logic, North-Holland (1977) ISBN 0-7204-2285-X
Cardone and Hindley, 2006. History of Lambda-calculus and Combinatory Logic. In Gabbay and Woods (eds.), Handbook of the History of Logic, vol. 5. Elsevier.
Church, Alonzo, An unsolvable problem of elementary number theory, American Journal of Mathematics, 58 (1936), pp. 345–363. This paper contains the proof that the equivalence of lambda expressions is in general not decidable.
Alonzo Church, The Calculi of Lambda-Conversion (ISBN 978-0-691-08394-0)
Kleene, Stephen, A theory of positive integers in formal logic, American Journal of Mathematics, 57 (1935), pp. 153–173 and 219–244. Contains the lambda calculus definitions of several familiar functions.
Landin, Peter, A Correspondence Between ALGOL 60 and Church's Lambda-Notation, Communications of the ACM, vol. 8, no. 2 (1965), pages 89–101. Available from the ACM site. A classic paper highlighting the importance of lambda calculus as a basis for programming languages.
Larson, Jim, An Introduction to Lambda Calculus and Scheme. A gentle introduction for programmers.
Schalk, A. and Simmons, H. (2005) An introduction to λ-calculi and arithmetic with a decent selection of exercises. Notes for a course in the Mathematical Logic MSc at Manchester University.
de Queiroz, Ruy J.G.B. (2008) On Reduction Rules, Meaning-as-Use and Proof-Theoretic Semantics. Studia Logica, 90(2):211-247. A paper giving a formal underpinning to the idea of 'meaning-is-use' which, even if based on proofs, it is different from proof-theoretic semantics as in the Dummett–Prawitz tradition since it takes reduction as the rules giving meaning.
Monographs/textbooks for graduate students:
Morten Heine Sørensen, Paweł Urzyczyn, Lectures on the Curry-Howard isomorphism, Elsevier, 2006, ISBN 0-444-52077-5 is a recent monograph that covers the main topics of lambda calculus from the type-free variety, to most typed lambda calculi, including more recent developments like pure type systems and the lambda cube. It does not cover subtyping extensions.
Pierce, Benjamin (2002), Types and Programming Languages, MIT Press, ISBN 0-262-16209-1  covers lambda calculi from a practical type system perspective; some topics like dependent types are only mentioned, but subtyping is an important topic.
Some parts of this article are based on material from FOLDOC, used with permission.
