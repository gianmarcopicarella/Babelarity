In numerical analysis, polynomial interpolation is the interpolation of a given data set by a polynomial: given some points, find a polynomial which goes exactly through these points.
Polynomials can be used to approximate complicated curves, for example, the shapes of letters in typography, given a few points. A relevant application is the evaluation of the natural logarithm and trigonometric functions: pick a few known data points, create a lookup table, and interpolate between those data points. This results in significantly faster computations. Polynomial interpolation also forms the basis for algorithms in numerical quadrature and numerical ordinary differential equations and Secure Multi Party Computation, Secret Sharing schemes.
Polynomial interpolation is also essential to perform sub-quadratic multiplication and squaring such as Karatsuba multiplication and Toom–Cook multiplication, where an interpolation through points on a polynomial which defines the product yields the product itself. For example, given a = f(x) = a0x0 + a1x1 + ... and b = g(x) = b0x0 + b1x1 + ..., the product ab is equivalent to W(x) = f(x)g(x). Finding points along W(x) by substituting x for small values in f(x) and g(x) yields points on the curve. Interpolation based on those points will yield the terms of W(x) and subsequently the product ab. In the case of Karatsuba multiplication this technique is substantially faster than quadratic multiplication, even for modest-sized inputs. This is especially true when implemented in parallel hardware.
Given a set of n + 1 data points (xi, yi) where no two xi are the same, one is looking for a polynomial p of degree at most n with the property
        p
        (
          x
            i
        )
        =
          y
            i
        ,
        i
        =
        0
        ,
        …
        ,
        n
        .
    {\displaystyle p(x_{i})=y_{i},\qquad i=0,\ldots ,n.}
The unisolvence theorem  states that such a polynomial p exists and is unique, and can be proved by the Vandermonde matrix, as described below.
The theorem states that for n + 1 interpolation nodes (xi), polynomial interpolation defines a linear bijection
          L
            n
        :
            K
            n
            +
            1
        →
          Π
            n
    {\displaystyle L_{n}:\mathbb {K} ^{n+1}\to \Pi _{n}}
where Πn is the vector space of polynomials (defined on any interval containing the nodes) of degree at most n.
Suppose that the interpolation polynomial is in the form
        p
        (
        x
        )
        =
          a
            n
          x
            n
        +
          a
            n
            −
            1
          x
            n
            −
            1
        +
        ⋯
        +
          a
            2
          x
            2
        +
          a
            1
        x
        +
          a
            0
        .
        (
        1
        )
    {\displaystyle p(x)=a_{n}x^{n}+a_{n-1}x^{n-1}+\cdots +a_{2}x^{2}+a_{1}x+a_{0}.\qquad (1)}
The statement that p interpolates the data points means that
        p
        (
          x
            i
        )
        =
          y
            i
          for all 
        i
        ∈
          {
          0
          ,
          1
          ,
          …
          ,
          n
          }
        .
    {\displaystyle p(x_{i})=y_{i}\qquad {\mbox{for all }}i\in \left\{0,1,\dots ,n\right\}.}
If we substitute equation (1) in here, we get a system of linear equations in the coefficients ak. The system in matrix-vector form reads
            [
                    x
                      0
                      n
                    x
                      0
                      n
                      −
                      1
                    x
                      0
                      n
                      −
                      2
                  …
                    x
                      0
                  1
                    x
                      1
                      n
                    x
                      1
                      n
                      −
                      1
                    x
                      1
                      n
                      −
                      2
                  …
                    x
                      1
                  1
                  ⋮
                  ⋮
                  ⋮
                  ⋮
                  ⋮
                    x
                      n
                      n
                    x
                      n
                      n
                      −
                      1
                    x
                      n
                      n
                      −
                      2
                  …
                    x
                      n
                  1
            ]
            [
                    a
                      n
                    a
                      n
                      −
                      1
                  ⋮
                    a
                      0
            ]
        =
            [
                    y
                      0
                    y
                      1
                  ⋮
                    y
                      n
            ]
        .
    {\displaystyle {\begin{bmatrix}x_{0}^{n}&x_{0}^{n-1}&x_{0}^{n-2}&\ldots &x_{0}&1\\x_{1}^{n}&x_{1}^{n-1}&x_{1}^{n-2}&\ldots &x_{1}&1\\\vdots &\vdots &\vdots &&\vdots &\vdots \\x_{n}^{n}&x_{n}^{n-1}&x_{n}^{n-2}&\ldots &x_{n}&1\end{bmatrix}}{\begin{bmatrix}a_{n}\\a_{n-1}\\\vdots \\a_{0}\end{bmatrix}}={\begin{bmatrix}y_{0}\\y_{1}\\\vdots \\y_{n}\end{bmatrix}}.}
We have to solve this system for ak to construct the interpolant p(x). The matrix on the left is commonly referred to as a Vandermonde matrix.
The condition number of the Vandermonde matrix may be large, causing large errors when computing the coefficients ai if the system of equations is solved using Gaussian elimination.
Several authors have therefore proposed algorithms which exploit the structure of the Vandermonde matrix to compute numerically stable solutions in O(n2) operations instead of the O(n3) required by Gaussian elimination. These methods rely on constructing first a Newton interpolation of the polynomial and then converting it to the monomial form above.
Alternatively, we may write down the polynomial immediately in terms of Lagrange polynomials:
                p
                (
                x
                )
                =
                      (
                      x
                      −
                        x
                          1
                      )
                      (
                      x
                      −
                        x
                          2
                      )
                      ⋯
                      (
                      x
                      −
                        x
                          n
                      )
                      (
                        x
                          0
                      −
                        x
                          1
                      )
                      (
                        x
                          0
                      −
                        x
                          2
                      )
                      ⋯
                      (
                        x
                          0
                      −
                        x
                          n
                      )
                  y
                    0
                +
                      (
                      x
                      −
                        x
                          0
                      )
                      (
                      x
                      −
                        x
                          2
                      )
                      ⋯
                      (
                      x
                      −
                        x
                          n
                      )
                      (
                        x
                          1
                      −
                        x
                          0
                      )
                      (
                        x
                          1
                      −
                        x
                          2
                      )
                      ⋯
                      (
                        x
                          1
                      −
                        x
                          n
                      )
                  y
                    1
                +
                …
                +
                      (
                      x
                      −
                        x
                          0
                      )
                      (
                      x
                      −
                        x
                          1
                      )
                      ⋯
                      (
                      x
                      −
                        x
                          n
                          −
                          1
                      )
                      (
                        x
                          n
                      −
                        x
                          0
                      )
                      (
                        x
                          n
                      −
                        x
                          1
                      )
                      ⋯
                      (
                        x
                          n
                      −
                        x
                          n
                          −
                          1
                      )
                  y
                    n
                =
                  ∑
                    i
                    =
                    0
                    n
                  (
                    ∏
                            j
                            ≠
                            i
                            0
                            ≤
                            j
                            ≤
                            n
                        x
                        −
                          x
                            j
                          x
                            i
                        −
                          x
                            j
                  )
                  y
                    i
    {\displaystyle {\begin{aligned}p(x)&={\frac {(x-x_{1})(x-x_{2})\cdots (x-x_{n})}{(x_{0}-x_{1})(x_{0}-x_{2})\cdots (x_{0}-x_{n})}}y_{0}+{\frac {(x-x_{0})(x-x_{2})\cdots (x-x_{n})}{(x_{1}-x_{0})(x_{1}-x_{2})\cdots (x_{1}-x_{n})}}y_{1}+\ldots +{\frac {(x-x_{0})(x-x_{1})\cdots (x-x_{n-1})}{(x_{n}-x_{0})(x_{n}-x_{1})\cdots (x_{n}-x_{n-1})}}y_{n}\\&=\sum _{i=0}^{n}\left(\prod _{\stackrel {\!0\leq j\leq n}{j\neq i}}{\frac {x-x_{j}}{x_{i}-x_{j}}}\right)y_{i}\end{aligned}}}
For matrix arguments, this formula is called Sylvester's formula and the matrix-valued Lagrange polynomials are the Frobenius covariants.
Suppose we interpolate through n + 1 data points with an at-most n degree polynomial p(x) (we need at least n + 1 datapoints or else the polynomial cannot be fully solved for). Suppose also another polynomial exists also of degree at most n that also interpolates the n + 1 points; call it q(x).
Consider 
        r
        (
        x
        )
        =
        p
        (
        x
        )
        −
        q
        (
        x
        )
    {\displaystyle r(x)=p(x)-q(x)}
  . We know,
r(x) is a polynomial
r(x) has degree at most n, since p(x) and q(x) are no higher than this and we are just subtracting them.
At the n + 1 data points, 
        r
        (
          x
            i
        )
        =
        p
        (
          x
            i
        )
        −
        q
        (
          x
            i
        )
        =
          y
            i
        −
          y
            i
        =
        0
    {\displaystyle r(x_{i})=p(x_{i})-q(x_{i})=y_{i}-y_{i}=0}
  . Therefore, r(x) has n + 1 roots.
But r(x) is a polynomial of degree ≤ n. It has one root too many. Formally, if r(x) is any non-zero polynomial, it must be writable as 
        r
        (
        x
        )
        =
        A
        (
        x
        −
          x
            0
        )
        (
        x
        −
          x
            1
        )
        ⋯
        (
        x
        −
          x
            n
        )
    {\displaystyle r(x)=A(x-x_{0})(x-x_{1})\cdots (x-x_{n})}
  , for some constant A. By distributivity, the n + 1 x's multiply together to give leading term 
        A
          x
            n
            +
            1
    {\displaystyle Ax^{n+1}}
  , i.e. one degree higher than the maximum we set. So the only way r(x) can exist is if A = 0, or equivalently, r(x) = 0.
        r
        (
        x
        )
        =
        0
        =
        p
        (
        x
        )
        −
        q
        (
        x
        )
        ⟹
        p
        (
        x
        )
        =
        q
        (
        x
        )
    {\displaystyle r(x)=0=p(x)-q(x)\implies p(x)=q(x)}
So q(x) (which could be any polynomial, so long as it interpolates the points) is identical with p(x), and p(x) is unique.
Given the Vandermonde matrix used above to construct the interpolant, we can set up the system
        V
        a
        =
        y
    {\displaystyle Va=y}
To prove that V is nonsingular we use the Vandermonde determinant formula:
        det
        (
        V
        )
        =
          ∏
            i
            ,
            j
            =
            0
            ,
            i
            <
            j
            n
        (
          x
            i
        −
          x
            j
        )
    {\displaystyle \det(V)=\prod _{i,j=0,i<j}^{n}(x_{i}-x_{j})}
since the n + 1 points are distinct, the determinant can't be zero as 
          x
            i
        −
          x
            j
    {\displaystyle x_{i}-x_{j}}
   is never zero, therefore V is nonsingular and the system has a unique solution.
Either way this means that no matter what method we use to do our interpolation: direct, Lagrange etc., (assuming we can do all our calculations perfectly) we will always get the same polynomial.
We are trying to construct our unique interpolation polynomial in the vector space Πn of polynomials of degree n. When using a monomial basis for Πn we have to solve the Vandermonde matrix to construct the coefficients ak for the interpolation polynomial. This can be a very costly operation (as counted in clock cycles of a computer trying to do the job). By choosing another basis for Πn we can simplify the calculation of the coefficients but then we have to do additional calculations when we want to express the interpolation polynomial in terms of a monomial basis.
One method is to write the interpolation polynomial in the Newton form and use the method of divided differences to construct the coefficients, e.g. Neville's algorithm. The cost is O(n2) operations, while Gaussian elimination costs O(n3) operations. Furthermore, you only need to do O(n) extra work if an extra point is added to the data set, while for the other methods, you have to redo the whole computation.
Another method is to use the Lagrange form of the interpolation polynomial. The resulting formula immediately shows that the interpolation polynomial exists under the conditions stated in the above theorem. Lagrange formula is to be preferred to Vandermonde formula when we are not interested in computing the coefficients of the polynomial, but in computing the value of p(x) in a given x not in the original data set. In this case, we can reduce complexity to O(n2).
The Bernstein form was used in a constructive proof of the Weierstrass approximation theorem by Bernstein and has nowadays gained great importance in computer graphics in the form of Bézier curves.
When interpolating a given function f by a polynomial of degree n at the nodes x0,...,xn we get the error
        f
        (
        x
        )
        −
          p
            n
        (
        x
        )
        =
        f
        [
          x
            0
        ,
        …
        ,
          x
            n
        ,
        x
        ]
          ∏
            i
            =
            0
            n
        (
        x
        −
          x
            i
        )
    {\displaystyle f(x)-p_{n}(x)=f[x_{0},\ldots ,x_{n},x]\prod _{i=0}^{n}(x-x_{i})}
where
        f
        [
          x
            0
        ,
        …
        ,
          x
            n
        ,
        x
        ]
    {\displaystyle f[x_{0},\ldots ,x_{n},x]}
is the notation for divided differences.
If f is n + 1 times continuously differentiable on a closed interval I and 
          p
            n
        (
        x
        )
    {\displaystyle p_{n}(x)}
   be a polynomial of degree at most n that interpolates f at n + 1 distinct points {xi} (i=0,1,...,n) in that interval. Then for each x in the interval there exists ξ in that interval such that
        f
        (
        x
        )
        −
          p
            n
        (
        x
        )
        =
                f
                  (
                  n
                  +
                  1
                  )
              (
              ξ
              )
              (
              n
              +
              1
              )
              !
          ∏
            i
            =
            0
            n
        (
        x
        −
          x
            i
        )
        .
    {\displaystyle f(x)-p_{n}(x)={\frac {f^{(n+1)}(\xi )}{(n+1)!}}\prod _{i=0}^{n}(x-x_{i}).}
The above error bound suggests choosing the interpolation points xi such that the product 
          |
          ∏
          (
          x
          −
            x
              i
          )
          |
        ,
    {\displaystyle \left|\prod (x-x_{i})\right|,}
   is as small as possible. The Chebyshev nodes achieve this.
Set the error term as
          R
            n
        (
        x
        )
        =
        f
        (
        x
        )
        −
          p
            n
        (
        x
        )
    {\displaystyle R_{n}(x)=f(x)-p_{n}(x)}
and set up an auxiliary function:
        Y
        (
        t
        )
        =
          R
            n
        (
        t
        )
        −
                R
                  n
              (
              x
              )
              W
              (
              x
              )
        W
        (
        t
        )
    {\displaystyle Y(t)=R_{n}(t)-{\frac {R_{n}(x)}{W(x)}}W(t)}
where
        W
        (
        u
        )
        =
          ∏
            i
            =
            0
            n
        (
        u
        −
          x
            i
        )
    {\displaystyle W(u)=\prod _{i=0}^{n}(u-x_{i})}
Since xi are roots of  f  and 
          p
            n
    {\displaystyle p_{n}}
  , we have Y(x) = Y(xi) = 0, which means Y has n + 2 roots. From Rolle's theorem, 
          Y
            ′
        (
        t
        )
    {\displaystyle Y^{\prime }(t)}
   has n + 1 roots, then 
          Y
            (
            n
            +
            1
            )
        (
        t
        )
    {\displaystyle Y^{(n+1)}(t)}
   has one root ξ, where ξ is in the interval I.
So we can get
          Y
            (
            n
            +
            1
            )
        (
        t
        )
        =
          R
            n
            (
            n
            +
            1
            )
        (
        t
        )
        −
                R
                  n
              (
              x
              )
              W
              (
              x
              )
        (
        n
        +
        1
        )
        !
    {\displaystyle Y^{(n+1)}(t)=R_{n}^{(n+1)}(t)-{\frac {R_{n}(x)}{W(x)}}\ (n+1)!}
Since 
          p
            n
        (
        x
        )
    {\displaystyle p_{n}(x)}
   is a polynomial of degree at most n, then
          R
            n
            (
            n
            +
            1
            )
        (
        t
        )
        =
          f
            (
            n
            +
            1
            )
        (
        t
        )
    {\displaystyle R_{n}^{(n+1)}(t)=f^{(n+1)}(t)}
Thus
          Y
            (
            n
            +
            1
            )
        (
        t
        )
        =
          f
            (
            n
            +
            1
            )
        (
        t
        )
        −
                R
                  n
              (
              x
              )
              W
              (
              x
              )
        (
        n
        +
        1
        )
        !
    {\displaystyle Y^{(n+1)}(t)=f^{(n+1)}(t)-{\frac {R_{n}(x)}{W(x)}}\ (n+1)!}
Since ξ is the root of 
          Y
            (
            n
            +
            1
            )
        (
        t
        )
    {\displaystyle Y^{(n+1)}(t)}
  , so
          Y
            (
            n
            +
            1
            )
        (
        ξ
        )
        =
          f
            (
            n
            +
            1
            )
        (
        ξ
        )
        −
                R
                  n
              (
              x
              )
              W
              (
              x
              )
        (
        n
        +
        1
        )
        !
        =
        0
    {\displaystyle Y^{(n+1)}(\xi )=f^{(n+1)}(\xi )-{\frac {R_{n}(x)}{W(x)}}\ (n+1)!=0}
Therefore,
          R
            n
        (
        x
        )
        =
        f
        (
        x
        )
        −
          p
            n
        (
        x
        )
        =
                f
                  (
                  n
                  +
                  1
                  )
              (
              ξ
              )
              (
              n
              +
              1
              )
              !
          ∏
            i
            =
            0
            n
        (
        x
        −
          x
            i
        )
    {\displaystyle R_{n}(x)=f(x)-p_{n}(x)={\frac {f^{(n+1)}(\xi )}{(n+1)!}}\prod _{i=0}^{n}(x-x_{i})}
  .
Thus the remainder term in the Lagrange form of the Taylor theorem is a special case of interpolation error when all interpolation nodes xi are identical. Note that the error will be zero when 
        x
        =
          x
            i
    {\displaystyle x=x_{i}}
   for any i. Thus, the maximum error will occur at some point in the interval between two successive nodes.
In the case of equally spaced interpolation nodes where 
          x
            0
        =
        a
    {\displaystyle x_{0}=a}
   and 
          x
            i
        =
        a
        +
        i
        h
    {\displaystyle x_{i}=a+ih}
  , for 
        i
        =
        1
        ,
        2
        ,
        …
        ,
        n
        ,
    {\displaystyle i=1,2,\ldots ,n,}
   where 
        h
        =
        (
        b
        −
        a
        )
          /
        n
        ,
    {\displaystyle h=(b-a)/n,}
   the product term in the interpolation error formula can be bound as
          |
            ∏
              i
              =
              0
              n
          (
          x
          −
            x
              i
          )
          |
        ≤
          ∏
            i
            =
            0
            n
          |
          (
          x
          −
            x
              i
          )
          |
        ≤
              n
              !
            4
          h
            n
            +
            1
    {\displaystyle \left|\prod _{i=0}^{n}(x-x_{i})\right|\leq \prod _{i=0}^{n}\left|(x-x_{i})\right|\leq {\frac {n!}{4}}h^{n+1}}
  .
Thus the error bound can be given as
          |
            R
              n
          (
          x
          )
          |
        ≤
              h
                n
                +
                1
              4
              (
              n
              +
              1
              )
          max
            ξ
            ∈
            [
            a
            ,
            b
            ]
          |
            f
              (
              n
              +
              1
              )
          (
          ξ
          )
          |
    {\displaystyle \left|R_{n}(x)\right|\leq {\frac {h^{n+1}}{4(n+1)}}\max _{\xi \in [a,b]}\left|f^{(n+1)}(\xi )\right|}
However, this assumes that 
          f
            (
            n
            +
            1
            )
        (
        ξ
        )
    {\displaystyle f^{(n+1)}(\xi )}
   is dominated by 
          h
            n
            +
            1
    {\displaystyle h^{n+1}}
  , i.e. 
          f
            (
            n
            +
            1
            )
        (
        ξ
        )
          h
            n
            +
            1
        ≪
        1
    {\displaystyle f^{(n+1)}(\xi )h^{n+1}\ll 1}
  . In several cases, this is not true and the error actually increases as n → ∞ (see Runge's phenomenon). That question is treated in the section Convergence properties.
See the main article: Lebesgue constant.
We fix the interpolation nodes x0, ..., xn and an interval [a, b] containing all the interpolation nodes. The process of interpolation maps the function f to a polynomial p. This defines a mapping X from the space C([a, b]) of all continuous functions on [a, b] to itself. The map X is linear and it is a projection on the subspace Πn of polynomials of degree n or less.
The Lebesgue constant L is defined as the operator norm of X. One has (a special case of Lebesgue's lemma):
        ∥
        f
        −
        X
        (
        f
        )
        ∥
        ≤
        (
        L
        +
        1
        )
        ∥
        f
        −
          p
            ∗
        ∥
        .
    {\displaystyle \|f-X(f)\|\leq (L+1)\|f-p^{*}\|.}
In other words, the interpolation polynomial is at most a factor (L + 1) worse than the best possible approximation. This suggests that we look for a set of interpolation nodes that makes L small. In particular, we have for Chebyshev nodes:
        L
        ≤
            2
            π
        log
        ⁡
        (
        n
        +
        1
        )
        +
        1.
    {\displaystyle L\leq {\frac {2}{\pi }}\log(n+1)+1.}
We conclude again that Chebyshev nodes are a very good choice for polynomial interpolation, as the growth in n is exponential for equidistant nodes. However, those nodes are not optimal.
It is natural to ask, for which classes of functions and for which interpolation nodes the sequence of interpolating polynomials converges to the interpolated function as n → ∞? Convergence may be understood in different ways, e.g. pointwise, uniform or in some integral norm.
The situation is rather bad for equidistant nodes, in that uniform convergence is not even guaranteed for infinitely differentiable functions. One classical example, due to Carl Runge, is the function f(x) = 1 / (1 + x2) on the interval [−5, 5]. The interpolation error || f − pn||∞ grows without bound as n → ∞. Another example is the function f(x) = |x| on the interval [−1, 1], for which the interpolating polynomials do not even converge pointwise except at the three points x = ±1, 0.
One might think that better convergence properties may be obtained by choosing different interpolation nodes. The following result seems to give a rather encouraging answer:
Theorem. For any function f(x) continuous on an interval [a,b] there exists a table of nodes for which the sequence of interpolating polynomials 
          p
            n
        (
        x
        )
    {\displaystyle p_{n}(x)}
   converges to f(x) uniformly on [a,b].
Proof. It's clear that the sequence of polynomials of best approximation 
          p
            n
            ∗
        (
        x
        )
    {\displaystyle p_{n}^{*}(x)}
   converges to f(x) uniformly (due to Weierstrass approximation theorem). Now we have only to show that each 
          p
            n
            ∗
        (
        x
        )
    {\displaystyle p_{n}^{*}(x)}
   may be obtained by means of interpolation on certain nodes. But this is true due to a special property of polynomials of best approximation known from the Chebyshev alternation theorem. Specifically, we know that such polynomials should intersect f(x) at least n + 1 times. Choosing the points of intersection as interpolation nodes we obtain the interpolating polynomial coinciding with the best approximation polynomial.
The defect of this method, however, is that interpolation nodes should be calculated anew for each new function f(x), but the algorithm is hard to be implemented numerically. Does there exist a single table of nodes for which the sequence of interpolating polynomials converge to any continuous function f(x)? The answer is unfortunately negative:
Theorem. For any table of nodes there is a continuous function f(x) on an interval [a, b] for which the sequence of interpolating polynomials diverges on [a,b].
The proof essentially uses the lower bound estimation of the Lebesgue constant, which we defined above to be the operator norm of Xn (where Xn is the projection operator on Πn). Now we seek a table of nodes for which
          lim
            n
            →
            ∞
          X
            n
        f
        =
        f
        ,
           for every 
        f
        ∈
        C
        (
        [
        a
        ,
        b
        ]
        )
        .
    {\displaystyle \lim _{n\to \infty }X_{n}f=f,{\text{ for every }}f\in C([a,b]).}
Due to the Banach–Steinhaus theorem, this is only possible when norms of Xn are uniformly bounded, which cannot be true since we know that
        ∥
          X
            n
        ∥
        ≥
              2
              π
        log
        ⁡
        (
        n
        +
        1
        )
        +
        C
        .
    {\displaystyle \|X_{n}\|\geq {\tfrac {2}{\pi }}\log(n+1)+C.}
For example, if equidistant points are chosen as interpolation nodes, the function from Runge's phenomenon demonstrates divergence of such interpolation. Note that this function is not only continuous but even infinitely times differentiable on [−1, 1]. For better Chebyshev nodes, however, such an example is much harder to find due to the following result:
Theorem. For every absolutely continuous function on [−1, 1] the sequence of interpolating polynomials constructed on Chebyshev nodes converges to f(x) uniformly.
Runge's phenomenon shows that for high values of n, the interpolation polynomial may oscillate wildly between the data points. This problem is commonly resolved by the use of spline interpolation. Here, the interpolant is not a polynomial but a spline: a chain of several polynomials of a lower degree.
Interpolation of periodic functions by harmonic functions is accomplished by Fourier transform. This can be seen as a form of polynomial interpolation with harmonic base functions, see trigonometric interpolation and trigonometric polynomial.
Hermite interpolation problems are those where not only the values of the polynomial p at the nodes are given, but also all derivatives up to a given order. This turns out to be equivalent to a system of simultaneous polynomial congruences, and may be solved by means of the Chinese remainder theorem for polynomials. Birkhoff interpolation is a further generalization where only derivatives of some orders are prescribed, not necessarily all orders from 0 to a k.
Collocation methods for the solution of differential and integral equations are based on polynomial interpolation.
The technique of rational function modeling is a generalization that considers ratios of polynomial functions.
At last, multivariate interpolation for higher dimensions.
Newton series
Polynomial regression
