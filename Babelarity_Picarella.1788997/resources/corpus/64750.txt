In mathematics and computing, hexadecimal (also base 16, or hex) is a positional numeral system with a radix, or base, of 16. It uses sixteen distinct symbols, most often the symbols 0–9 to represent values zero to nine, and A, B, C, D, E, F (or alternatively a, b, c, d, e, f) to represent values ten to fifteen. Hexadecimal numerals are widely used by computer system designers and programmers. Several different notations are used to represent hexadecimal constants in computing languages; the prefix "0x" is widespread due to its use in Unix and C (and related operating systems and languages). Alternatively, some authors denote hexadecimal values using a suffix or subscript. For example, one could write 0x2AF3 or 2AF316, depending on the choice of notation.
As an example, the hexadecimal number 2AF316 can be converted to an equivalent decimal representation. Observe that 2AF316 is equal to a sum of (200016 + A0016 + F016 + 316), by decomposing the numeral into a series of place value terms. Converting each term to decimal, one can further write:
                    2
                    A
                    F
                    3
                    16
                =
                (
                  2
                    16
                ×
                  16
                    3
                )
                +
                (
                    A
                    16
                ×
                  16
                    2
                )
                +
                (
                    F
                    16
                ×
                  16
                    1
                )
                +
                (
                  3
                    16
                ×
                  16
                    0
                )
                =
                (
                2
                ×
                4096
                )
                +
                (
                10
                ×
                256
                )
                +
                (
                15
                ×
                16
                )
                +
                (
                3
                ×
                1
                )
                =
                10995
    {\displaystyle {\begin{array}{rccccccccc}\mathrm {2AF3} _{16}&=&(2_{16}\times 16^{3})&+&(\mathrm {A} _{16}\times 16^{2})&+&(\mathrm {F} _{16}\times 16^{1})&+&(3_{16}\times 16^{0})\\&=&(2\times 4096)&+&(10\times 256)&+&(15\times 16)&+&(3\times 1)\\&=&10995\end{array}}}
Each hexadecimal digit represents four binary digits (bits), and the primary use of hexadecimal notation is a human-friendly representation of binary-coded values in computing and digital electronics. One hexadecimal digit represents a nibble, which is half of an octet or byte (8 bits). For example, byte values can range from 0 to 255 (decimal), but may be more conveniently represented as two hexadecimal digits in the range 00 to FF. Hexadecimal is also commonly used to represent computer memory addresses.
In contexts where the base is not clear, hexadecimal numbers can be ambiguous and confused with numbers expressed in other bases. There are several conventions for expressing values unambiguously. A numerical subscript (itself written in decimal) can give the base explicitly: 15910 is decimal 159; 15916 is hexadecimal 159, which is equal to 34510. Some authors prefer a text subscript, such as 159decimal and 159hex, or 159d and 159h.
In linear text systems, such as those used in most computer programming environments, a variety of methods have arisen:
In URIs (including URLs), character codes are written as hexadecimal pairs prefixed with %: http://www.example.com/name%20with%20spaces where %20 is the space (blank) character, ASCII code point 20 in hex, 32 in decimal.
In XML and XHTML, characters can be expressed as hexadecimal numeric character references using the notation &#xcode;, where the x denotes that code is a hex code point (of 1- to 6-digits) assigned to the character in the Unicode standard. Thus &#x2019; represents the right single quotation mark (’), Unicode code point number 2019 in hex, 8217 (thus &#8217; in decimal).
In the Unicode standard, a character value is represented with U+ followed by the hex value, e.g. U+20AC is the Euro sign (€).
Color references in HTML, CSS and X Window can be expressed with six hexadecimal digits (two each for the red, green and blue components, in that order) prefixed with #: white, for example, is represented #FFFFFF . CSS allows 3-hexdigit abbreviations with one hexdigit per component: #FA3 abbreviates #FFAA33 (a golden orange:     ).
*nix (Unix and related) shells, AT&T assembly language and likewise the C programming language, which was designed for Unix (and the syntactic descendants of C – including C++, C#, D, Java, JavaScript, Python and Windows PowerShell) use the prefix 0x for numeric constants represented in hex: 0x5A3. Character and string constants may express character codes in hexadecimal with the prefix \x followed by two hex digits: '\x1B' represents the Esc control character; "\x1B[0m\x1B[25;1H" is a string containing 11 characters (plus a trailing NUL to mark the end of the string) with two embedded Esc characters. To output an integer as hexadecimal with the printf function family, the format conversion code %X or %x is used.
In MIME (e-mail extensions) quoted-printable encoding, characters that cannot be represented as literal ASCII characters are represented by their codes as two hexadecimal digits (in ASCII) prefixed by an equal to sign =, as in Espa=F1a to send "España" (Spain). (Hexadecimal F1, equal to decimal 241, is the code number for the lower case n with tilde in the ISO/IEC 8859-1 character set.)
In Intel-derived assembly languages and Modula-2, hexadecimal is denoted with a suffixed H or h: FFh or 05A3H. Some implementations require a leading zero when the first hexadecimal digit character is not a decimal digit, so one would write 0FFh instead of FFh
Other assembly languages (6502, Motorola), Pascal, Delphi, some versions of BASIC (Commodore), Game Maker Language, Godot and Forth use $ as a prefix: $5A3.
Some assembly languages (Microchip) use the notation H'ABCD' (for ABCD16).
Ada and VHDL enclose hexadecimal numerals in based "numeric quotes": 16#5A3#. For bit vector constants VHDL uses the notation x"5A3".
Verilog represents hexadecimal constants in the form 8'hFF, where 8 is the number of bits in the value and FF is the hexadecimal constant.
The Smalltalk language uses the prefix 16r: 16r5A3
PostScript and the Bourne shell and its derivatives denote hex with prefix 16#: 16#5A3. For PostScript, binary data (such as image pixels) can be expressed as unprefixed consecutive hexadecimal pairs: AA213FD51B3801043FBC...
In early systems when a Macintosh crashed, one or two lines of hexadecimal code would be displayed under the Sad Mac to tell the user what went wrong.
Common Lisp uses the prefixes #x and #16r. Setting the variables *read-base* and *print-base* to 16 can also used to switch the reader and printer of a Common Lisp system to Hexadecimal number representation for reading and printing numbers. Thus Hexadecimal numbers can be represented without the #x or #16r prefix code, when the input or output base has been changed to 16.
MSX BASIC, QuickBASIC, FreeBASIC and Visual Basic prefix hexadecimal numbers with &H: &H5A3
BBC BASIC and Locomotive BASIC use & for hex.
TI-89 and 92 series uses a 0h prefix: 0h5A3
ALGOL 68 uses the prefix 16r to denote hexadecimal numbers: 16r5a3. Binary, quaternary (base-4) and octal numbers can be specified similarly.
The most common format for hexadecimal on IBM mainframes (zSeries) and midrange computers (IBM System i) running the traditional OS's (zOS, zVSE, zVM, TPF, IBM i) is X'5A3', and is used in Assembler, PL/I, COBOL, JCL, scripts, commands and other places. This format was common on other (and now obsolete) IBM systems as well. Occasionally quotation marks were used instead of apostrophes.
Donald Knuth introduced the use of a particular typeface to represent a particular radix in his book The TeXbook. Hexadecimal representations are written there in a typewriter typeface: 5A3
Any IPv6 address can be written as eight groups of four hexadecimal digits, where each group is separated by a colon (:). This, for example, is a valid IPv6 address: 2001:0db8:85a3:0000:0000:8a2e:0370:7334; this can be abbreviated as 2001:db8:85a3::8a2e:370:7334. By contrast, IPv4 addresses are usually written in decimal.
Globally unique identifiers are written as thirty-two hexadecimal digits, often in unequal hyphen-separated groupings, for example {3F2504E0-4F89-41D3-9A0C-0305E82C3301}.
There is no universal convention to use lowercase or uppercase for the letter digits, and each is prevalent or preferred in particular environments by community standards or convention.
The use of the letters A through F to represent the digits above 9 was not universal in the early history of computers.
During the 1950s, some installations favored using the digits 0 through 5 with a macron to denote the values 10–15 as 0, 1, 2, 3, 4 and 5.
Bendix G-15 computers used the letters U through Z.
The Librascope LGP-30 used the letters F, G, J, K, Q and W.
The ILLIAC I computer used the letters K, S, N, J, F and L.
Bruce Alan Martin of Brookhaven National Laboratory considered the choice of A–F "ridiculous" and in a 1968 letter to the editor of the CACM proposed an entirely new set of symbols based on the bit locations, which did not gain much, if any, acceptance.
Soviet programmable calculators Б3-34 and similar used the symbols "−", "L", "C", "Г", "E", " " (space) on their displays.
Seven-segment display decoder chips used various schemes for outputting values above nine:
The Texas Instruments 7446/7/8/9 and 74246/7/8/9 use truncated versions of "2", "3", "4", "5" and "6" for digits A–E. Digit F (1111 binary) was blank.
The National Semiconductor MM74C912 displayed "o" for A and B, "−" for C, D and E, and blank for F.
The CD4511 just displays blanks.
There are no traditional numerals to represent the quantities from ten to fifteen — letters are used as a substitute — and most European languages lack non-decimal names for the numerals above ten. Even though English has names for several non-decimal powers (pair for the first binary power, score for the first vigesimal power, dozen, gross and great gross for the first three duodecimal powers), no English name describes the hexadecimal powers (decimal 16, 256, 4096, 65536, ... ). Some people read hexadecimal numbers digit by digit like a phone number: 4DA is "four-dee-ay". However, the letter A sounds like "eight", and D can easily be mistaken for the "-ty" suffix: Is it 4D or forty? Other people avoid confusion by using the NATO phonetic alphabet: 4DA is "four-delta-alfa", the Joint Army/Navy Phonetic Alphabet ("four-dog-able"), or a similar ad hoc system.
Systems of counting on digits have been devised for both binary and hexadecimal. Arthur C. Clarke suggested using each finger as an on/off bit, allowing finger counting from zero to 102310 on ten fingers. Another system for counting up to FF16 (25510) is illustrated on the right.
The hexadecimal system can express negative numbers the same way as in decimal: −2A to represent −4210 and so on.
Hexadecimal can also be used to express the exact bit patterns used in the processor, so a sequence of hexadecimal digits may represent a signed or even a floating point value. This way, the negative number −4210 can be written as FFFF FFD6 in a 32-bit CPU register (in two's-complement), as C228 0000 in a 32-bit FPU register or C045 0000 0000 0000 in a 64-bit FPU register (in the IEEE floating-point standard).
Just as decimal numbers can be represented in exponential notation, so too can hexadecimal. By convention, the letter P (or p, for "power") represents times two raised to the power of, whereas E (or e) serves a similar purpose in decimal as part of the E notation. The number after the P is decimal and represents the binary exponent.
Usually the number is normalised so that the leading hexadecimal digit is 1 (unless the value is exactly 0).
Example: 1.3DEp42 represents 1.3DE16 × 242.
Using the %a or %A conversion specifiers, this notation can be produced by implementations of the printf family of functions following the C99 specification and (Single Unix Specification) IEEE Std 1003.1 POSIX standard. Hexadecimal exponential notation is required by the IEEE 754-2008 binary floating-point standard.
Most computers manipulate binary data, but it is difficult for humans to work with the large number of digits for even a relatively small binary number. Although most humans are familiar with the base 10 system, it is much easier to map binary to hexadecimal than to decimal because each hexadecimal digit maps to a whole number of bits (410). This example converts 11112 to base ten. Since each position in a binary numeral can contain either a 1 or a 0, its value may be easily determined by its position from the right:
00012 = 110
00102 = 210
01002 = 410
10002 = 810
Therefore:
With little practice, mapping 11112 to F16 in one step becomes easy: see table in Written representation. The advantage of using hexadecimal rather than decimal increases rapidly with the size of the number. When the number becomes large, conversion to decimal is very tedious. However, when mapping to hexadecimal, it is trivial to regard the binary string as 4-digit groups and map each to a single hexadecimal digit.
This example shows the conversion of a binary number to decimal, mapping each digit to the decimal value, and adding the results.
Compare this to the conversion to hexadecimal, where each group of four digits can be considered independently, and converted directly:
The conversion from hexadecimal to binary is equally direct.
The octal system can also be useful as a tool for people who need to deal directly with binary computer data. Octal represents data as three bits per character, rather than four.
As with all bases there is a simple algorithm for converting a representation of a number to hexadecimal by doing integer division and remainder operations in the source base. In theory, this is possible from any base, but for most humans only decimal and for most computers only binary (which can be converted by far more efficient methods) can be easily handled with this method.
Let d be the number to represent in hexadecimal, and the series hihi−1...h2h1 be the hexadecimal digits representing the number.
i ← 1
hi ← d mod 16
d ← (d − hi) / 16
If d = 0 (return series hi) else increment i and go to step 2
"16" may be replaced with any other base that may be desired.
The following is a JavaScript implementation of the above algorithm for converting any number to a hexadecimal in String representation. Its purpose is to illustrate the above algorithm. To work with data seriously, however, it is much more advisable to work with bitwise operators.
It is also possible to make the conversion by assigning each place in the source base the hexadecimal representation of its place value and then performing multiplication and addition to get the final representation. That is, to convert the number B3AD to decimal one can split the hexadecimal number into its digits: B (1110), 3 (310), A (1010) and D (1310), and then get the final result by multiplying each decimal representation by 16p, where p is the corresponding hex digit position, counting from right to left, beginning with 0. In this case we have B3AD = (11 × 163) + (3 × 162) + (10 × 161) + (13 × 160), which is 45997 base 10.
Most modern computer systems with graphical user interfaces provide a built-in calculator utility, capable of performing conversions between various radices, in general including hexadecimal.
In Microsoft Windows, the Calculator utility can be set to Scientific mode (called Programmer mode in some versions), which allows conversions between radix 16 (hexadecimal), 10 (decimal), 8 (octal) and 2 (binary), the bases most commonly used by programmers. In Scientific Mode, the on-screen numeric keypad includes the hexadecimal digits A through F, which are active when "Hex" is selected. In hex mode, however, the Windows Calculator supports only integers.
As with other numeral systems, the hexadecimal system can be used to represent rational numbers, although repeating expansions are common since sixteen (10hex) has only a single prime factor (two):
where an overline denotes a recurring pattern.
For any base, 0.1 (or "1/10") is always equivalent to one divided by the representation of that base value in its own number system. Thus, whether dividing one by two for binary or dividing one by sixteen for hexadecimal, both of these fractions are written as 0.1. Because the radix 16 is a perfect square (42), fractions expressed in hexadecimal have an odd period much more often than decimal ones, and there are no cyclic numbers (other than trivial single digits). Recurring digits are exhibited when the denominator in lowest terms has a prime factor not found in the radix; thus, when using hexadecimal notation, all fractions with denominators that are not a power of two result in an infinite string of recurring digits (such as thirds and fifths). This makes hexadecimal (and binary) less convenient than decimal for representing rational numbers since a larger proportion lie outside its range of finite representation.
All rational numbers finitely representable in hexadecimal are also finitely representable in decimal, duodecimal and sexagesimal: that is, any hexadecimal number with a finite number of digits has a finite number of digits when expressed in those other bases. Conversely, only a fraction of those finitely representable in the latter bases are finitely representable in hexadecimal. For example, decimal 0.1 corresponds to the infinite recurring representation 0.199999999999... in hexadecimal. However, hexadecimal is more efficient than bases 12 and 60 for representing fractions with powers of two in the denominator (e.g., decimal one sixteenth is 0.1 in hexadecimal, 0.09 in duodecimal, 0;3,45 in sexagesimal and 0.0625 in decimal).
The table below gives the expansions of some common irrational numbers in decimal and hexadecimal.
Powers of two have very simple expansions in hexadecimal. The first sixteen powers of two are shown below.
The word hexadecimal is composed of hexa-, derived from the Greek έξ (hex) for six, and -decimal, derived from the Latin for tenth. Webster's Third New International online derives hexadecimal as an alteration of the all-Latin sexadecimal (which appears in the earlier Bendix documentation). The earliest date attested for hexadecimal in Merriam-Webster Collegiate online is 1954, placing it safely in the category of international scientific vocabulary (ISV). It is common in ISV to mix Greek and Latin combining forms freely. The word sexagesimal (for base 60) retains the Latin prefix. Donald Knuth has pointed out that the etymologically correct term is senidenary (or possibly, sedenary), from the Latin term for grouped by 16. (The terms binary, ternary and quaternary are from the same Latin construction, and the etymologically correct terms for decimal and octal arithmetic are denary and octonary, respectively.) Alfred B. Taylor used senidenary in his mid-1800s work on alternative number bases, although he rejected base 16 because of its "incommodious number of digits". Schwartzman notes that the expected form from usual Latin phrasing would be sexadecimal, but computer hackers would be tempted to shorten that word to sex. The etymologically proper Greek term would be hexadecadic (although in Modern Greek, deca-hexadic/δεκαεξαδικός is more commonly used).
The traditional Chinese units of weight were base-16. For example, one jīn (斤) in the old system equals sixteen taels. The suanpan (Chinese abacus) could be used to perform hexadecimal calculations.
As with the duodecimal system, there have been occasional attempts to promote hexadecimal as the preferred numeral system. These attempts often propose specific pronunciation and symbols for the individual numerals. Some proposals unify standard measures so that they are multiples of 16.
An example of unified standard measures is hexadecimal time, which subdivides a day by 16 so that there are 16 "hexhours" in a day.
Simple key for notations used in article:
Base32, Base64 (content encoding schemes)
Hex editor
Hex dump
