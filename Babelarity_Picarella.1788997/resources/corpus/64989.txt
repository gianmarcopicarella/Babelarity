In computability theory, the Ackermann function, named after Wilhelm Ackermann, is one of the simplest and earliest-discovered examples of a total computable function that is not primitive recursive. All primitive recursive functions are total and computable, but the Ackermann function illustrates that not all total computable functions are primitive recursive.
After Ackermann's publication of his function (which had three nonnegative integer arguments), many authors modified it to suit various purposes, so that today "the Ackermann function" may refer to any of numerous variants of the original function. One common version, the two-argument Ackermann–Péter function, is defined as follows for nonnegative integers m and n:
        A
        (
        m
        ,
        n
        )
        =
            {
                  n
                  +
                  1
                    if 
                  m
                  =
                  0
                  A
                  (
                  m
                  −
                  1
                  ,
                  1
                  )
                    if 
                  m
                  >
                  0
                     and 
                  n
                  =
                  0
                  A
                  (
                  m
                  −
                  1
                  ,
                  A
                  (
                  m
                  ,
                  n
                  −
                  1
                  )
                  )
                    if 
                  m
                  >
                  0
                     and 
                  n
                  >
                  0.
    {\displaystyle A(m,n)={\begin{cases}n+1&{\mbox{if }}m=0\\A(m-1,1)&{\mbox{if }}m>0{\mbox{ and }}n=0\\A(m-1,A(m,n-1))&{\mbox{if }}m>0{\mbox{ and }}n>0.\end{cases}}}
Its value grows rapidly, even for small inputs. For example, A(4,2) is an integer of 19,729 decimal digits.
In the late 1920s, the mathematicians Gabriel Sudan and Wilhelm Ackermann, students of David Hilbert, were studying the foundations of computation. Both Sudan and Ackermann are credited with discovering total computable functions (termed simply "recursive" in some references) that are not primitive recursive. Sudan published the lesser-known Sudan function, then shortly afterwards and independently, in 1928, Ackermann published his function 
        φ
    {\displaystyle \varphi \,\!}
   (the Greek letter phi). Ackermann's three-argument function, 
        φ
        (
        m
        ,
        n
        ,
        p
        )
    {\displaystyle \varphi (m,n,p)\,\!}
  , is defined such that for p = 0, 1, 2, it reproduces the basic operations of addition, multiplication, and exponentiation as
        φ
        (
        m
        ,
        n
        ,
        0
        )
        =
        m
        +
        n
        ,
    {\displaystyle \varphi (m,n,0)=m+n,\,\!}
        φ
        (
        m
        ,
        n
        ,
        1
        )
        =
        m
        ⋅
        n
        ,
    {\displaystyle \varphi (m,n,1)=m\cdot n,\,\!}
        φ
        (
        m
        ,
        n
        ,
        2
        )
        =
          m
            n
        ,
    {\displaystyle \varphi (m,n,2)=m^{n},\,\!}
and for p > 2 it extends these basic operations in a way that can be compared to the hyperoperations: (Aside from its historic role as a total-computable-but-not-primitive-recursive function, Ackermann's original function is seen to extend the basic arithmetic operations beyond exponentiation, although not as seamlessly as do variants of Ackermann's function that are specifically designed for that purpose—such as Goodstein's hyperoperation sequence.)
In On the Infinite, David Hilbert hypothesized that the Ackermann function was not primitive recursive, but it was Ackermann, Hilbert’s personal secretary and former student, who actually proved the hypothesis in his paper On Hilbert’s Construction of the Real Numbers.
Rózsa Péter and Raphael Robinson later developed a two-variable version of the Ackermann function that became preferred by many authors.
Ackermann's original three-argument function 
        φ
        (
        m
        ,
        n
        ,
        p
        )
    {\displaystyle \varphi (m,n,p)\,\!}
   is defined recursively as follows for nonnegative integers m, n, and p:
        φ
        (
        m
        ,
        n
        ,
        p
        )
        =
            {
                  φ
                  (
                  m
                  ,
                  n
                  ,
                  0
                  )
                  =
                  m
                  +
                  n
                  φ
                  (
                  m
                  ,
                  0
                  ,
                  1
                  )
                  =
                  0
                  φ
                  (
                  m
                  ,
                  0
                  ,
                  2
                  )
                  =
                  1
                  φ
                  (
                  m
                  ,
                  0
                  ,
                  p
                  )
                  =
                  m
                     for 
                  p
                  >
                  2
                  φ
                  (
                  m
                  ,
                  n
                  ,
                  p
                  )
                  =
                  φ
                  (
                  m
                  ,
                  φ
                  (
                  m
                  ,
                  n
                  −
                  1
                  ,
                  p
                  )
                  ,
                  p
                  −
                  1
                  )
                     for 
                  n
                  >
                  0
                     and 
                  p
                  >
                  0.
    {\displaystyle \varphi (m,n,p)={\begin{cases}\varphi (m,n,0)=m+n\\\varphi (m,0,1)=0\\\varphi (m,0,2)=1\\\varphi (m,0,p)=m&{\text{ for }}p>2\\\varphi (m,n,p)=\varphi (m,\varphi (m,n-1,p),p-1)&{\text{ for }}n>0{\text{ and }}p>0.\end{cases}}\,\!}
Of the various two-argument versions, the one developed by Péter and Robinson (called "the" Ackermann function by some authors) is defined for nonnegative integers m and n as follows:
        A
        (
        m
        ,
        n
        )
        =
            {
                  n
                  +
                  1
                    if 
                  m
                  =
                  0
                  A
                  (
                  m
                  −
                  1
                  ,
                  1
                  )
                    if 
                  m
                  >
                  0
                     and 
                  n
                  =
                  0
                  A
                  (
                  m
                  −
                  1
                  ,
                  A
                  (
                  m
                  ,
                  n
                  −
                  1
                  )
                  )
                    if 
                  m
                  >
                  0
                     and 
                  n
                  >
                  0.
    {\displaystyle A(m,n)={\begin{cases}n+1&{\mbox{if }}m=0\\A(m-1,1)&{\mbox{if }}m>0{\mbox{ and }}n=0\\A(m-1,A(m,n-1))&{\mbox{if }}m>0{\mbox{ and }}n>0.\end{cases}}}
It may not be immediately obvious that the evaluation of 
        A
        (
        m
        ,
        n
        )
    {\displaystyle A(m,n)}
   always terminates. However, the recursion is bounded because in each recursive application either m decreases, or m remains the same and n decreases. Each time that n reaches zero, m decreases, so m eventually reaches zero as well. (Expressed more technically, in each case the pair (m, n) decreases in the lexicographic order on pairs, which is a well-ordering, just like the ordering of single non-negative integers; this means one cannot go down in the ordering infinitely many times in succession.) However, when m decreases there is no upper bound on how much n can increase—and it will often increase greatly.
The Péter-Ackermann function can also be expressed in terms of various other versions of the Ackermann function:
the indexed version of Knuth's up-arrow notation (extended to integer indices ≥ -2):
        A
        (
        m
        ,
        n
        )
        =
        2
          ↑
            m
            −
            2
        (
        n
        +
        3
        )
        −
        3.
    {\displaystyle A(m,n)=2\uparrow ^{m-2}(n+3)-3.}
The part of the definition A(m, 0) = A(m-1, 1) corresponds to 
        2
          ↑
            m
            +
            1
        3
        =
        2
          ↑
            m
        4.
    {\displaystyle 2\uparrow ^{m+1}3=2\uparrow ^{m}4.}
Conway chained arrow notation:
        A
        (
        m
        ,
        n
        )
        =
        (
        2
        →
        (
        n
        +
        3
        )
        →
        (
        m
        −
        2
        )
        )
        −
        3
    {\displaystyle A(m,n)=(2\rightarrow (n+3)\rightarrow (m-2))-3}
   for 
        m
        ≥
        3
    {\displaystyle m\geq 3}
hence
        2
        →
        n
        →
        m
        =
        A
        (
        m
        +
        2
        ,
        n
        −
        3
        )
        +
        3
    {\displaystyle 2\rightarrow n\rightarrow m=A(m+2,n-3)+3}
   for 
        n
        >
        2
    {\displaystyle n>2}
  .
(n=1 and n=2 would correspond with A(m,−2) = −1 and A(m,−1) = 1, which could logically be added.)
For small values of m like 1, 2, or 3, the Ackermann function grows relatively slowly with respect to n (at most exponentially). For m ≥ 4, however, it grows much more quickly; even A(4, 2) is about 2×1019728, and the decimal expansion of A(4, 3) is very large by any typical measure.
Logician Harvey Friedman defines a version of the Ackermann function as follows:
For n = 0: A(m, n) = 1
For m = 1: A(m, n) = 2n
Else: A(m, n) = A(m - 1, A(m, n - 1))
He also defines a single-argument version A(n) = A(n, n).
A single-argument version A(k) = A(k, k) that increases both m and n at the same time dwarfs every primitive recursive function, including very fast-growing functions such as the exponential function, the factorial function, multi- and superfactorial functions, and even functions defined using Knuth's up-arrow notation (except when the indexed up-arrow is used). It can be seen that A(n) is roughly comparable to fω(n) in the fast-growing hierarchy.
This extreme growth can be exploited to show that f, which is obviously computable on a machine with infinite memory such as a Turing machine and so is a computable function, grows faster than any primitive recursive function and is therefore not primitive recursive. In a category with exponentials, using the isomorphism 
        A
        ×
        B
        →
        C
        ≅
        A
        →
        (
        B
        →
        C
        )
    {\displaystyle A\times B\rightarrow C\cong A\rightarrow (B\rightarrow C)}
   (in computer science, this is called currying), the Ackermann function may be defined via primitive recursion over higher-order functionals as follows:
                Ack
                ⁡
                (
                0
                )
                =
                Succ
                Ack
                ⁡
                (
                m
                +
                1
                )
                =
                Iter
                ⁡
                (
                Ack
                ⁡
                (
                m
                )
                )
    {\displaystyle {\begin{array}{lcl}\operatorname {Ack} (0)&=&\operatorname {Succ} \\\operatorname {Ack} (m+1)&=&\operatorname {Iter} (\operatorname {Ack} (m))\end{array}}}
where Succ is the usual successor function and Iter is defined by primitive recursion as well:
                Iter
                ⁡
                (
                f
                )
                (
                0
                )
                =
                f
                (
                1
                )
                Iter
                ⁡
                (
                f
                )
                (
                n
                +
                1
                )
                =
                f
                (
                Iter
                ⁡
                (
                f
                )
                (
                n
                )
                )
                .
    {\displaystyle {\begin{array}{lcl}\operatorname {Iter} (f)(0)&=&f(1)\\\operatorname {Iter} (f)(n+1)&=&f(\operatorname {Iter} (f)(n)).\end{array}}}
One interesting aspect of the Ackermann function is that the only arithmetic operations it ever uses are addition and subtraction of 1. Its properties come solely from the power of unlimited recursion. This also implies that its running time is at least proportional to its output, and so is also extremely huge. In actuality, for most cases the running time is far larger than the output; see below.
Computing the Ackermann function can be restated in terms of an infinite table. We place the natural numbers along the top row. To determine a number in the table, take the number immediately to the left, then look up the required number in the previous row, at the position given by the number just taken. If there is no number to its left, simply look at the column headed "1" in the previous row. Here is a small upper-left portion of the table:
The numbers here which are only expressed with recursive exponentiation or Knuth arrows are very large and would take up too much space to notate in plain decimal digits.
Despite the large values occurring in this early section of the table, some even larger numbers have been defined, such as Graham's number, which cannot be written with any small number of Knuth arrows. This number is constructed with a technique similar to applying the Ackermann function to itself recursively.
This is a repeat of the above table, but with the values replaced by the relevant expression from the function definition to show the pattern clearly:
To see how the Ackermann function grows so quickly, it helps to expand out some simple expressions using the rules in the original definition. For example, we can fully evaluate 
        A
        (
        1
        ,
        2
        )
    {\displaystyle A(1,2)}
   in the following way:
                A
                (
                1
                ,
                2
                )
                =
                A
                (
                0
                ,
                A
                (
                1
                ,
                1
                )
                )
                =
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                1
                ,
                0
                )
                )
                )
                =
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                1
                )
                )
                )
                =
                A
                (
                0
                ,
                A
                (
                0
                ,
                2
                )
                )
                =
                A
                (
                0
                ,
                3
                )
                =
                4.
    {\displaystyle {\begin{aligned}A(1,2)&=A(0,A(1,1))\\&=A(0,A(0,A(1,0)))\\&=A(0,A(0,A(0,1)))\\&=A(0,A(0,2))\\&=A(0,3)\\&=4.\end{aligned}}}
To demonstrate how 
        A
        (
        4
        ,
        3
        )
    {\displaystyle A(4,3)}
  's computation results in many steps and in a large number:
                A
                (
                4
                ,
                3
                )
                =
                A
                (
                3
                ,
                A
                (
                4
                ,
                2
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                4
                ,
                1
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                4
                ,
                0
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                1
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                3
                ,
                0
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                2
                ,
                1
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                A
                (
                2
                ,
                0
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                A
                (
                1
                ,
                1
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                A
                (
                0
                ,
                A
                (
                1
                ,
                0
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                1
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                A
                (
                0
                ,
                2
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                1
                ,
                3
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                1
                ,
                2
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                1
                ,
                1
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                1
                ,
                0
                )
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                1
                )
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                2
                )
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                A
                (
                0
                ,
                3
                )
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                A
                (
                0
                ,
                4
                )
                )
                )
                )
                )
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                2
                ,
                5
                )
                )
                )
                )
                =
                …
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                A
                (
                3
                ,
                13
                )
                )
                )
                =
                …
                =
                A
                (
                3
                ,
                A
                (
                3
                ,
                65533
                )
                )
                =
                …
                =
                A
                (
                3
                ,
                  2
                    65536
                −
                3
                )
                =
                …
                =
                  2
                      2
                          65536
                −
                3.
    {\displaystyle {\begin{aligned}A(4,3)&=A(3,A(4,2))\\&=A(3,A(3,A(4,1)))\\&=A(3,A(3,A(3,A(4,0))))\\&=A(3,A(3,A(3,A(3,1))))\\&=A(3,A(3,A(3,A(2,A(3,0)))))\\&=A(3,A(3,A(3,A(2,A(2,1)))))\\&=A(3,A(3,A(3,A(2,A(1,A(2,0))))))\\&=A(3,A(3,A(3,A(2,A(1,A(1,1))))))\\&=A(3,A(3,A(3,A(2,A(1,A(0,A(1,0)))))))\\&=A(3,A(3,A(3,A(2,A(1,A(0,A(0,1)))))))\\&=A(3,A(3,A(3,A(2,A(1,A(0,2))))))\\&=A(3,A(3,A(3,A(2,A(1,3)))))\\&=A(3,A(3,A(3,A(2,A(0,A(1,2))))))\\&=A(3,A(3,A(3,A(2,A(0,A(0,A(1,1)))))))\\&=A(3,A(3,A(3,A(2,A(0,A(0,A(0,A(1,0))))))))\\&=A(3,A(3,A(3,A(2,A(0,A(0,A(0,A(0,1))))))))\\&=A(3,A(3,A(3,A(2,A(0,A(0,A(0,2)))))))\\&=A(3,A(3,A(3,A(2,A(0,A(0,3))))))\\&=A(3,A(3,A(3,A(2,A(0,4)))))\\&=A(3,A(3,A(3,A(2,5))))\\&=\ldots \\&=A(3,A(3,A(3,13)))\\&=\ldots \\&=A(3,A(3,65533))\\&=\ldots \\&=A(3,2^{65536}-3)\\&=\ldots \\&=2^{2^{\overset {65536}{}}}-3.\\\end{aligned}}}
Since the function  f (n) = A(n, n) considered above grows very rapidly, its inverse function, f−1, grows very slowly. This inverse Ackermann function f−1 is usually denoted by α. In fact, α(n) is less than 5 for any practical input size n, since A(4, 4) is on the order of 
          2
              2
                  2
                      2
                        16
    {\displaystyle 2^{2^{2^{2^{16}}}}}
  .
This inverse appears in the time complexity of some algorithms, such as the disjoint-set data structure and Chazelle's algorithm for minimum spanning trees. Sometimes Ackermann's original function or other variations are used in these settings, but they all grow at similarly high rates. In particular, some modified functions simplify the expression by eliminating the −3 and similar terms.
A two-parameter variation of the inverse Ackermann function can be defined as follows, where 
        ⌊
        x
        ⌋
    {\displaystyle \lfloor x\rfloor }
   is the floor function:
        α
        (
        m
        ,
        n
        )
        =
        min
        {
        i
        ≥
        1
        :
        A
        (
        i
        ,
        ⌊
        m
          /
        n
        ⌋
        )
        ≥
          log
            2
        ⁡
        n
        }
        .
    {\displaystyle \alpha (m,n)=\min\{i\geq 1:A(i,\lfloor m/n\rfloor )\geq \log _{2}n\}.}
This function arises in more precise analyses of the algorithms mentioned above, and gives a more refined time bound. In the disjoint-set data structure, m represents the number of operations while n represents the number of elements; in the minimum spanning tree algorithm, m represents the number of edges while n represents the number of vertices. Several slightly different definitions of α(m, n) exist; for example, log2 n is sometimes replaced by n, and the floor function is sometimes replaced by a ceiling.
Other studies might define an inverse function of one where m is set to a constant, such that the inverse applies to a particular row.
The Ackermann function, due to its definition in terms of extremely deep recursion, can be used as a benchmark of a compiler's ability to optimize recursion. The first published use of Ackermann's function in this way was in 1971 by Yngve Sundblad.
Sundblad's seminal paper was taken up by Brian Wichmann (co-author of the Whetstone benchmark) in a trilogy of papers written between 1975 and 1982.
Computability theory
Double recursion
Fast-growing hierarchy
Goodstein function
Primitive recursive function
Recursion (computer science)
